// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Types
open ParserTypes
open QuadSupport
open Symbol
open Error
open AuxFunctions
open Identifier
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing


let parse_error_rich = None

initSymbolTable 256
List.iter bulkLoad LibraryFunctions

# 25 "obj\x86\Debug\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EQ
  | NE
  | LT
  | LE
  | GT
  | GE
  | PLUS
  | MINUS
  | ASTER
  | SLASH
  | MOD
  | NOT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LSBR
  | RSBR
  | LCBR
  | RCBR
  | COMMA
  | COLON
  | SEMICOLON
  | ASSIGN
  | T_BYTE
  | T_ELSE
  | T_FALSE
  | T_IF
  | T_INT
  | T_PROC
  | T_REF
  | T_RETURN
  | T_WHILE
  | T_TRUE
  | T_EOF
  | ID of (string)
  | STRING of (string)
  | INT of (int)
  | BYTE of (byte)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_ASTER
    | TOKEN_SLASH
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LSBR
    | TOKEN_RSBR
    | TOKEN_LCBR
    | TOKEN_RCBR
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_ASSIGN
    | TOKEN_T_BYTE
    | TOKEN_T_ELSE
    | TOKEN_T_FALSE
    | TOKEN_T_IF
    | TOKEN_T_INT
    | TOKEN_T_PROC
    | TOKEN_T_REF
    | TOKEN_T_RETURN
    | TOKEN_T_WHILE
    | TOKEN_T_TRUE
    | TOKEN_T_EOF
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_BYTE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_func_def
    | NONTERM_func_head
    | NONTERM_func_params
    | NONTERM_fpar_list
    | NONTERM_fpar_def
    | NONTERM_data_type
    | NONTERM_type
    | NONTERM_r_type
    | NONTERM_local_def
    | NONTERM_local_def_list
    | NONTERM_var_def
    | NONTERM_stmt
    | NONTERM_stmt_list
    | NONTERM_compound_stmt
    | NONTERM_func_call
    | NONTERM_expr_list
    | NONTERM_expr
    | NONTERM_ref_value
    | NONTERM_l_value
    | NONTERM_cond
    | NONTERM_compop

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EQ  -> 0 
  | NE  -> 1 
  | LT  -> 2 
  | LE  -> 3 
  | GT  -> 4 
  | GE  -> 5 
  | PLUS  -> 6 
  | MINUS  -> 7 
  | ASTER  -> 8 
  | SLASH  -> 9 
  | MOD  -> 10 
  | NOT  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | LPAREN  -> 14 
  | RPAREN  -> 15 
  | LSBR  -> 16 
  | RSBR  -> 17 
  | LCBR  -> 18 
  | RCBR  -> 19 
  | COMMA  -> 20 
  | COLON  -> 21 
  | SEMICOLON  -> 22 
  | ASSIGN  -> 23 
  | T_BYTE  -> 24 
  | T_ELSE  -> 25 
  | T_FALSE  -> 26 
  | T_IF  -> 27 
  | T_INT  -> 28 
  | T_PROC  -> 29 
  | T_REF  -> 30 
  | T_RETURN  -> 31 
  | T_WHILE  -> 32 
  | T_TRUE  -> 33 
  | T_EOF  -> 34 
  | ID _ -> 35 
  | STRING _ -> 36 
  | INT _ -> 37 
  | BYTE _ -> 38 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EQ 
  | 1 -> TOKEN_NE 
  | 2 -> TOKEN_LT 
  | 3 -> TOKEN_LE 
  | 4 -> TOKEN_GT 
  | 5 -> TOKEN_GE 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_ASTER 
  | 9 -> TOKEN_SLASH 
  | 10 -> TOKEN_MOD 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_LPAREN 
  | 15 -> TOKEN_RPAREN 
  | 16 -> TOKEN_LSBR 
  | 17 -> TOKEN_RSBR 
  | 18 -> TOKEN_LCBR 
  | 19 -> TOKEN_RCBR 
  | 20 -> TOKEN_COMMA 
  | 21 -> TOKEN_COLON 
  | 22 -> TOKEN_SEMICOLON 
  | 23 -> TOKEN_ASSIGN 
  | 24 -> TOKEN_T_BYTE 
  | 25 -> TOKEN_T_ELSE 
  | 26 -> TOKEN_T_FALSE 
  | 27 -> TOKEN_T_IF 
  | 28 -> TOKEN_T_INT 
  | 29 -> TOKEN_T_PROC 
  | 30 -> TOKEN_T_REF 
  | 31 -> TOKEN_T_RETURN 
  | 32 -> TOKEN_T_WHILE 
  | 33 -> TOKEN_T_TRUE 
  | 34 -> TOKEN_T_EOF 
  | 35 -> TOKEN_ID 
  | 36 -> TOKEN_STRING 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_BYTE 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_func_def 
    | 4 -> NONTERM_func_def 
    | 5 -> NONTERM_func_def 
    | 6 -> NONTERM_func_def 
    | 7 -> NONTERM_func_head 
    | 8 -> NONTERM_func_params 
    | 9 -> NONTERM_func_params 
    | 10 -> NONTERM_fpar_list 
    | 11 -> NONTERM_fpar_list 
    | 12 -> NONTERM_fpar_def 
    | 13 -> NONTERM_fpar_def 
    | 14 -> NONTERM_data_type 
    | 15 -> NONTERM_data_type 
    | 16 -> NONTERM_type 
    | 17 -> NONTERM_type 
    | 18 -> NONTERM_r_type 
    | 19 -> NONTERM_r_type 
    | 20 -> NONTERM_local_def 
    | 21 -> NONTERM_local_def 
    | 22 -> NONTERM_local_def_list 
    | 23 -> NONTERM_local_def_list 
    | 24 -> NONTERM_var_def 
    | 25 -> NONTERM_var_def 
    | 26 -> NONTERM_var_def 
    | 27 -> NONTERM_var_def 
    | 28 -> NONTERM_stmt 
    | 29 -> NONTERM_stmt 
    | 30 -> NONTERM_stmt 
    | 31 -> NONTERM_stmt 
    | 32 -> NONTERM_stmt 
    | 33 -> NONTERM_stmt 
    | 34 -> NONTERM_stmt 
    | 35 -> NONTERM_stmt 
    | 36 -> NONTERM_stmt 
    | 37 -> NONTERM_stmt 
    | 38 -> NONTERM_stmt 
    | 39 -> NONTERM_stmt 
    | 40 -> NONTERM_stmt 
    | 41 -> NONTERM_stmt 
    | 42 -> NONTERM_stmt 
    | 43 -> NONTERM_stmt 
    | 44 -> NONTERM_stmt 
    | 45 -> NONTERM_stmt_list 
    | 46 -> NONTERM_stmt_list 
    | 47 -> NONTERM_compound_stmt 
    | 48 -> NONTERM_compound_stmt 
    | 49 -> NONTERM_compound_stmt 
    | 50 -> NONTERM_func_call 
    | 51 -> NONTERM_func_call 
    | 52 -> NONTERM_expr_list 
    | 53 -> NONTERM_expr_list 
    | 54 -> NONTERM_expr_list 
    | 55 -> NONTERM_expr_list 
    | 56 -> NONTERM_expr 
    | 57 -> NONTERM_expr 
    | 58 -> NONTERM_expr 
    | 59 -> NONTERM_expr 
    | 60 -> NONTERM_expr 
    | 61 -> NONTERM_expr 
    | 62 -> NONTERM_expr 
    | 63 -> NONTERM_expr 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_expr 
    | 66 -> NONTERM_expr 
    | 67 -> NONTERM_expr 
    | 68 -> NONTERM_expr 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr 
    | 73 -> NONTERM_expr 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_ref_value 
    | 79 -> NONTERM_ref_value 
    | 80 -> NONTERM_l_value 
    | 81 -> NONTERM_l_value 
    | 82 -> NONTERM_cond 
    | 83 -> NONTERM_cond 
    | 84 -> NONTERM_cond 
    | 85 -> NONTERM_cond 
    | 86 -> NONTERM_cond 
    | 87 -> NONTERM_cond 
    | 88 -> NONTERM_cond 
    | 89 -> NONTERM_cond 
    | 90 -> NONTERM_cond 
    | 91 -> NONTERM_compop 
    | 92 -> NONTERM_compop 
    | 93 -> NONTERM_compop 
    | 94 -> NONTERM_compop 
    | 95 -> NONTERM_compop 
    | 96 -> NONTERM_compop 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | ASTER  -> "ASTER" 
  | SLASH  -> "SLASH" 
  | MOD  -> "MOD" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LSBR  -> "LSBR" 
  | RSBR  -> "RSBR" 
  | LCBR  -> "LCBR" 
  | RCBR  -> "RCBR" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | ASSIGN  -> "ASSIGN" 
  | T_BYTE  -> "T_BYTE" 
  | T_ELSE  -> "T_ELSE" 
  | T_FALSE  -> "T_FALSE" 
  | T_IF  -> "T_IF" 
  | T_INT  -> "T_INT" 
  | T_PROC  -> "T_PROC" 
  | T_REF  -> "T_REF" 
  | T_RETURN  -> "T_RETURN" 
  | T_WHILE  -> "T_WHILE" 
  | T_TRUE  -> "T_TRUE" 
  | T_EOF  -> "T_EOF" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | BYTE _ -> "BYTE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | ASTER  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LSBR  -> (null : System.Object) 
  | RSBR  -> (null : System.Object) 
  | LCBR  -> (null : System.Object) 
  | RCBR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | T_BYTE  -> (null : System.Object) 
  | T_ELSE  -> (null : System.Object) 
  | T_FALSE  -> (null : System.Object) 
  | T_IF  -> (null : System.Object) 
  | T_INT  -> (null : System.Object) 
  | T_PROC  -> (null : System.Object) 
  | T_REF  -> (null : System.Object) 
  | T_RETURN  -> (null : System.Object) 
  | T_WHILE  -> (null : System.Object) 
  | T_TRUE  -> (null : System.Object) 
  | T_EOF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BYTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 11us; 65535us; 0us; 2us; 6us; 38us; 8us; 38us; 65us; 38us; 67us; 38us; 72us; 38us; 82us; 38us; 84us; 38us; 86us; 38us; 94us; 38us; 96us; 38us; 11us; 65535us; 0us; 5us; 6us; 5us; 8us; 5us; 65us; 5us; 67us; 5us; 72us; 5us; 82us; 5us; 84us; 5us; 86us; 5us; 94us; 5us; 96us; 5us; 1us; 65535us; 5us; 6us; 1us; 65535us; 15us; 19us; 2us; 65535us; 15us; 23us; 24us; 25us; 5us; 65535us; 17us; 36us; 21us; 36us; 27us; 28us; 29us; 33us; 42us; 43us; 1us; 65535us; 29us; 30us; 2us; 65535us; 17us; 18us; 21us; 22us; 10us; 65535us; 6us; 40us; 8us; 41us; 65us; 54us; 67us; 54us; 72us; 54us; 82us; 54us; 84us; 54us; 86us; 54us; 94us; 54us; 96us; 54us; 1us; 65535us; 6us; 8us; 10us; 65535us; 6us; 39us; 8us; 39us; 65us; 39us; 67us; 39us; 72us; 39us; 82us; 39us; 84us; 39us; 86us; 39us; 94us; 39us; 96us; 39us; 8us; 65535us; 65us; 66us; 67us; 68us; 72us; 73us; 82us; 83us; 84us; 85us; 86us; 87us; 94us; 95us; 96us; 93us; 1us; 65535us; 96us; 94us; 10us; 65535us; 6us; 7us; 8us; 9us; 65us; 59us; 67us; 59us; 72us; 59us; 82us; 59us; 84us; 59us; 86us; 59us; 94us; 59us; 96us; 59us; 34us; 65535us; 56us; 119us; 63us; 119us; 65us; 60us; 67us; 60us; 70us; 119us; 72us; 60us; 74us; 119us; 82us; 60us; 84us; 60us; 86us; 60us; 94us; 60us; 96us; 60us; 102us; 119us; 108us; 119us; 114us; 119us; 115us; 119us; 120us; 119us; 122us; 119us; 138us; 119us; 139us; 119us; 140us; 119us; 141us; 119us; 142us; 119us; 151us; 119us; 152us; 119us; 153us; 119us; 154us; 119us; 155us; 119us; 157us; 119us; 163us; 119us; 165us; 119us; 168us; 119us; 169us; 119us; 170us; 119us; 1us; 65535us; 102us; 104us; 26us; 65535us; 56us; 57us; 63us; 135us; 70us; 135us; 74us; 76us; 102us; 106us; 108us; 109us; 114us; 116us; 115us; 117us; 120us; 121us; 122us; 123us; 138us; 124us; 139us; 125us; 140us; 126us; 141us; 127us; 142us; 128us; 151us; 129us; 152us; 130us; 153us; 131us; 154us; 132us; 155us; 133us; 157us; 134us; 163us; 135us; 165us; 136us; 168us; 135us; 169us; 135us; 170us; 137us; 2us; 65535us; 102us; 107us; 108us; 110us; 34us; 65535us; 56us; 113us; 63us; 113us; 65us; 55us; 67us; 55us; 70us; 113us; 72us; 55us; 74us; 113us; 82us; 55us; 84us; 55us; 86us; 55us; 94us; 55us; 96us; 55us; 102us; 113us; 108us; 113us; 114us; 113us; 115us; 113us; 120us; 113us; 122us; 113us; 138us; 113us; 139us; 113us; 140us; 113us; 141us; 113us; 142us; 113us; 151us; 113us; 152us; 113us; 153us; 113us; 154us; 113us; 155us; 113us; 157us; 113us; 163us; 113us; 165us; 113us; 168us; 113us; 169us; 113us; 170us; 113us; 6us; 65535us; 63us; 64us; 70us; 71us; 115us; 161us; 163us; 164us; 168us; 166us; 169us; 167us; 3us; 65535us; 117us; 165us; 135us; 165us; 150us; 170us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 15us; 27us; 29us; 31us; 34us; 40us; 42us; 45us; 56us; 58us; 69us; 78us; 80us; 91us; 126us; 128us; 155us; 158us; 193us; 200us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 4us; 3us; 4us; 5us; 6us; 4us; 3us; 4us; 5us; 6us; 1us; 3us; 3us; 4us; 6us; 23us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 5us; 7us; 24us; 25us; 26us; 27us; 9us; 7us; 24us; 25us; 26us; 27us; 50us; 51us; 80us; 81us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 9us; 11us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 2us; 12us; 13us; 2us; 12us; 13us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 4us; 24us; 25us; 26us; 27us; 3us; 24us; 25us; 26us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 3us; 30us; 38us; 39us; 2us; 30us; 38us; 11us; 30us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 4us; 33us; 34us; 40us; 41us; 2us; 33us; 34us; 4us; 33us; 34us; 87us; 88us; 2us; 33us; 34us; 2us; 33us; 34us; 1us; 34us; 1us; 34us; 2us; 35us; 42us; 1us; 35us; 3us; 35us; 87us; 88us; 1us; 35us; 1us; 35us; 3us; 36us; 37us; 43us; 1us; 36us; 11us; 37us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 37us; 6us; 38us; 68us; 69us; 70us; 71us; 72us; 1us; 38us; 1us; 39us; 1us; 39us; 2us; 40us; 41us; 2us; 40us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 6us; 43us; 68us; 69us; 70us; 71us; 72us; 1us; 43us; 1us; 44us; 2us; 44us; 49us; 1us; 44us; 1us; 45us; 2us; 46us; 48us; 1us; 46us; 3us; 47us; 48us; 49us; 1us; 47us; 1us; 48us; 1us; 49us; 5us; 50us; 51us; 79us; 80us; 81us; 4us; 50us; 51us; 80us; 81us; 2us; 50us; 51us; 1us; 50us; 3us; 51us; 54us; 55us; 1us; 51us; 11us; 52us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 53us; 2us; 54us; 55us; 11us; 54us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 2us; 59us; 84us; 11us; 59us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 13us; 59us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 86us; 89us; 1us; 59us; 1us; 60us; 1us; 61us; 11us; 61us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 62us; 11us; 62us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 68us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 69us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 70us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 71us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 72us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 81us; 12us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 86us; 89us; 11us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 86us; 11us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 90us; 2us; 63us; 73us; 2us; 64us; 74us; 2us; 65us; 75us; 2us; 66us; 76us; 2us; 67us; 77us; 5us; 68us; 69us; 70us; 71us; 72us; 6us; 68us; 69us; 70us; 71us; 72us; 73us; 6us; 68us; 69us; 70us; 71us; 72us; 74us; 6us; 68us; 69us; 70us; 71us; 72us; 75us; 6us; 68us; 69us; 70us; 71us; 72us; 76us; 6us; 68us; 69us; 70us; 71us; 72us; 77us; 6us; 68us; 69us; 70us; 71us; 72us; 89us; 6us; 68us; 69us; 70us; 71us; 72us; 90us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 78us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 83us; 3us; 84us; 87us; 88us; 1us; 84us; 1us; 85us; 3us; 85us; 87us; 88us; 2us; 86us; 89us; 3us; 87us; 87us; 88us; 3us; 87us; 88us; 88us; 1us; 87us; 1us; 88us; 1us; 90us; 1us; 91us; 1us; 92us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 96us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 15us; 20us; 22us; 26us; 28us; 30us; 32us; 34us; 40us; 50us; 53us; 55us; 57us; 59us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 114us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 144us; 147us; 159us; 161us; 163us; 165us; 167us; 172us; 175us; 180us; 183us; 186us; 188us; 190us; 193us; 195us; 199us; 201us; 203us; 207us; 209us; 221us; 223us; 230us; 232us; 234us; 236us; 239us; 242us; 244us; 246us; 248us; 250us; 257us; 259us; 261us; 264us; 266us; 268us; 271us; 273us; 277us; 279us; 281us; 283us; 289us; 294us; 297us; 299us; 303us; 305us; 317us; 319us; 322us; 334us; 336us; 338us; 340us; 342us; 344us; 347us; 359us; 373us; 375us; 377us; 379us; 391us; 393us; 405us; 417us; 429us; 441us; 453us; 465us; 477us; 489us; 501us; 513us; 525us; 537us; 550us; 562us; 574us; 577us; 580us; 583us; 586us; 589us; 595us; 602us; 609us; 616us; 623us; 630us; 637us; 644us; 646us; 648us; 650us; 652us; 654us; 656us; 658us; 660us; 662us; 664us; 668us; 670us; 672us; 676us; 679us; 683us; 687us; 689us; 691us; 693us; 695us; 697us; 699us; 701us; 703us; |]
let _fsyacc_action_rows = 177
let _fsyacc_actionTableElements = [|2us; 32768us; 35us; 12us; 39us; 3us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 34us; 4us; 0us; 16386us; 1us; 32768us; 14us; 15us; 3us; 32768us; 18us; 96us; 35us; 13us; 39us; 10us; 0us; 16387us; 3us; 32768us; 18us; 96us; 35us; 13us; 39us; 11us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 1us; 16391us; 21us; 42us; 5us; 16391us; 14us; 102us; 16us; 157us; 21us; 42us; 23us; 16464us; 39us; 16464us; 2us; 32768us; 15us; 16us; 35us; 26us; 1us; 32768us; 21us; 17us; 3us; 32768us; 24us; 32us; 28us; 31us; 29us; 37us; 0us; 16392us; 2us; 32768us; 15us; 20us; 20us; 24us; 1us; 32768us; 21us; 21us; 3us; 32768us; 24us; 32us; 28us; 31us; 29us; 37us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 35us; 26us; 0us; 16395us; 1us; 32768us; 21us; 27us; 3us; 32768us; 24us; 32us; 28us; 31us; 30us; 29us; 0us; 16396us; 2us; 32768us; 24us; 32us; 28us; 31us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 1us; 16400us; 16us; 34us; 1us; 32768us; 17us; 35us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 3us; 32768us; 24us; 32us; 28us; 31us; 39us; 51us; 3us; 32768us; 16us; 45us; 22us; 44us; 39us; 49us; 0us; 16408us; 1us; 32768us; 37us; 46us; 1us; 32768us; 17us; 47us; 1us; 32768us; 22us; 48us; 0us; 16409us; 1us; 32768us; 22us; 50us; 0us; 16410us; 1us; 32768us; 22us; 52us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 2us; 32768us; 23us; 56us; 39us; 80us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 78us; 6us; 32768us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 22us; 58us; 0us; 16414us; 0us; 16415us; 1us; 32768us; 22us; 61us; 0us; 16416us; 2us; 32768us; 14us; 63us; 39us; 82us; 10us; 32768us; 6us; 120us; 7us; 122us; 11us; 163us; 14us; 115us; 26us; 160us; 33us; 159us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 150us; 3us; 32768us; 12us; 168us; 13us; 169us; 15us; 65us; 7us; 32768us; 18us; 96us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 1us; 16417us; 25us; 67us; 7us; 32768us; 18us; 96us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 0us; 16418us; 2us; 32768us; 14us; 70us; 39us; 86us; 10us; 32768us; 6us; 120us; 7us; 122us; 11us; 163us; 14us; 115us; 26us; 160us; 33us; 159us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 150us; 3us; 32768us; 12us; 168us; 13us; 169us; 15us; 72us; 7us; 32768us; 18us; 96us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 0us; 16419us; 8us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 22us; 75us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 88us; 0us; 16420us; 6us; 32768us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 22us; 77us; 0us; 16421us; 6us; 32768us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 22us; 79us; 0us; 16422us; 1us; 32768us; 22us; 81us; 0us; 16423us; 7us; 32768us; 18us; 96us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 1us; 16424us; 25us; 84us; 7us; 32768us; 18us; 96us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 0us; 16425us; 7us; 32768us; 18us; 96us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 0us; 16426us; 6us; 32768us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 22us; 89us; 0us; 16427us; 1us; 32768us; 22us; 92us; 2us; 32768us; 19us; 99us; 22us; 92us; 0us; 16428us; 0us; 16429us; 8us; 32768us; 18us; 96us; 19us; 98us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 90us; 0us; 16430us; 8us; 32768us; 18us; 96us; 19us; 97us; 22us; 53us; 27us; 62us; 31us; 74us; 32us; 69us; 35us; 14us; 39us; 91us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 7us; 16463us; 6us; 16464us; 7us; 16464us; 8us; 16464us; 9us; 16464us; 10us; 16464us; 14us; 102us; 16us; 157us; 2us; 16464us; 14us; 102us; 16us; 157us; 9us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 15us; 103us; 35us; 100us; 36us; 156us; 37us; 111us; 38us; 112us; 39us; 143us; 0us; 16434us; 2us; 32768us; 15us; 105us; 20us; 108us; 0us; 16435us; 5us; 16436us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 0us; 16437us; 8us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 100us; 36us; 156us; 37us; 111us; 38us; 112us; 39us; 143us; 5us; 16438us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 10us; 32768us; 6us; 120us; 7us; 122us; 11us; 163us; 14us; 115us; 26us; 160us; 33us; 159us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 150us; 6us; 32768us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 15us; 118us; 12us; 32768us; 0us; 171us; 1us; 172us; 2us; 173us; 3us; 175us; 4us; 174us; 5us; 176us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 15us; 118us; 0us; 16443us; 0us; 16444us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 0us; 16445us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 0us; 16446us; 3us; 16447us; 8us; 140us; 9us; 141us; 10us; 142us; 3us; 16448us; 8us; 140us; 9us; 141us; 10us; 142us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 3us; 16452us; 8us; 140us; 9us; 141us; 10us; 142us; 3us; 16453us; 8us; 140us; 9us; 141us; 10us; 142us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 6us; 32768us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 17us; 158us; 11us; 32768us; 0us; 171us; 1us; 172us; 2us; 173us; 3us; 175us; 4us; 174us; 5us; 176us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 5us; 16470us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 5us; 16474us; 6us; 139us; 7us; 138us; 8us; 140us; 9us; 141us; 10us; 142us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 144us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 145us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 146us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 147us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 148us; 5us; 32768us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 5us; 16457us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 5us; 16458us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 5us; 16459us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 5us; 16460us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 5us; 16461us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 5us; 16473us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 11us; 32768us; 0us; 171us; 1us; 172us; 2us; 173us; 3us; 175us; 4us; 174us; 5us; 176us; 6us; 152us; 7us; 151us; 8us; 153us; 9us; 154us; 10us; 155us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 0us; 16462us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 3us; 32768us; 12us; 168us; 13us; 169us; 15us; 162us; 0us; 16468us; 10us; 32768us; 6us; 120us; 7us; 122us; 11us; 163us; 14us; 115us; 26us; 160us; 33us; 159us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 150us; 0us; 16469us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 149us; 0us; 16471us; 1us; 16472us; 12us; 168us; 10us; 32768us; 6us; 120us; 7us; 122us; 11us; 163us; 14us; 115us; 26us; 160us; 33us; 159us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 150us; 10us; 32768us; 6us; 120us; 7us; 122us; 11us; 163us; 14us; 115us; 26us; 160us; 33us; 159us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 150us; 7us; 32768us; 6us; 120us; 7us; 122us; 14us; 114us; 35us; 101us; 37us; 111us; 38us; 112us; 39us; 143us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 0us; 16478us; 0us; 16479us; 0us; 16480us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 7us; 8us; 10us; 14us; 15us; 19us; 20us; 21us; 22us; 23us; 25us; 31us; 34us; 36us; 40us; 41us; 44us; 46us; 50us; 51us; 52us; 54us; 55us; 57us; 61us; 62us; 65us; 66us; 67us; 68us; 70us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 83us; 87us; 88us; 90us; 92us; 94us; 95us; 97us; 98us; 100us; 101us; 102us; 103us; 106us; 114us; 121us; 122us; 123us; 125us; 126us; 129us; 140us; 144us; 152us; 154us; 162us; 163us; 166us; 177us; 181us; 189us; 190us; 199us; 200us; 207us; 208us; 215us; 216us; 218us; 219us; 227us; 229us; 237us; 238us; 246us; 247us; 254us; 255us; 257us; 260us; 261us; 262us; 271us; 272us; 281us; 282us; 283us; 284us; 292us; 295us; 305us; 306us; 309us; 310us; 316us; 317us; 326us; 332us; 333us; 334us; 335us; 336us; 344us; 355us; 362us; 375us; 376us; 377us; 385us; 386us; 394us; 395us; 399us; 403us; 404us; 405us; 406us; 410us; 414us; 415us; 416us; 417us; 424us; 436us; 442us; 448us; 456us; 464us; 472us; 480us; 488us; 494us; 500us; 506us; 512us; 518us; 524us; 530us; 542us; 550us; 558us; 566us; 574us; 582us; 583us; 591us; 592us; 593us; 594us; 598us; 599us; 610us; 611us; 619us; 620us; 622us; 633us; 644us; 652us; 653us; 654us; 655us; 656us; 657us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 3us; 4us; 3us; 4us; 1us; 4us; 5us; 1us; 3us; 3us; 4us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 4us; 7us; 5us; 4us; 1us; 1us; 4us; 1us; 2us; 5us; 7us; 5us; 2us; 3us; 4us; 3us; 3us; 5us; 3us; 3us; 2us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 3us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 4us; 1us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16394us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 16397us; 16398us; 16399us; 65535us; 65535us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 16412us; 16413us; 65535us; 65535us; 65535us; 16414us; 16415us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 16420us; 65535us; 16421us; 65535us; 16422us; 65535us; 16423us; 65535us; 65535us; 65535us; 16425us; 65535us; 16426us; 65535us; 16427us; 65535us; 65535us; 16428us; 16429us; 65535us; 16430us; 65535us; 16431us; 16432us; 16433us; 65535us; 65535us; 65535us; 16434us; 65535us; 16435us; 65535us; 16437us; 65535us; 65535us; 16439us; 16440us; 16441us; 16442us; 65535us; 65535us; 65535us; 65535us; 16443us; 16444us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 65535us; 16465us; 16466us; 16467us; 65535us; 16468us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16475us; 16476us; 16477us; 16478us; 16479us; 16480us; |]
let _fsyacc_reductions ()  =    [| 
# 426 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 435 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                       _1 
                   )
# 67 "Parser.fsy"
                 :  quadType list ));
# 446 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                          let p=FindPosition parseState in fatal "Unrecognized Parse Error at %A\n" p 
                   )
# 69 "Parser.fsy"
                 :  quadType list ));
# 456 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                     closeScope (); processFunctionDefinition parseState _1 [] _3 
                   )
# 72 "Parser.fsy"
                 :  quadType list ));
# 469 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                                                    closeScope (); processFunctionDefinition parseState _1 _3 _4 
                   )
# 73 "Parser.fsy"
                 :  quadType list ));
# 483 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                             
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Statements in Function declaration must be inside curly brackets\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     closeScope ()
                     []
                   )
# 74 "Parser.fsy"
                 :  quadType list ));
# 499 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                           
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Statements in Function body must be inside curly brackets\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     closeScope ()
                     []
                   )
# 81 "Parser.fsy"
                 :  quadType list ));
# 516 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                     
                     let f = newFunction (id_make _1) true
                     Some (f) |> openScope
                     f
                   )
# 89 "Parser.fsy"
                 :  entry ));
# 530 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                               endFunctionHeader (getScopeFunction()) _4 
                   )
# 96 "Parser.fsy"
                 : 'func_params));
# 541 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                         endFunctionHeader (getScopeFunction()) _5 
                   )
# 98 "Parser.fsy"
                 : 'func_params));
# 553 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                           () 
                   )
# 101 "Parser.fsy"
                 :  unit ));
# 564 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                           () 
                   )
# 103 "Parser.fsy"
                 :  unit ));
# 576 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                    newParameter (id_make _1) _3 PASS_BY_VALUE (getScopeFunction()) true |>ignore 
                   )
# 106 "Parser.fsy"
                 :  unit ));
# 588 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                     newParameter (id_make _1) _4 PASS_BY_REFERENCE (getScopeFunction()) true |>ignore
                   )
# 108 "Parser.fsy"
                 :  unit ));
# 600 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                        TYPE_int 
                   )
# 111 "Parser.fsy"
                 :  typ ));
# 610 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                         TYPE_byte 
                   )
# 113 "Parser.fsy"
                 :  typ ));
# 620 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                       _1 
                   )
# 116 "Parser.fsy"
                 :  typ ));
# 631 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                 TYPE_array (_1,-1) 
                   )
# 118 "Parser.fsy"
                 :  typ ));
# 642 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                         _1 
                   )
# 121 "Parser.fsy"
                 :  typ ));
# 653 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                      TYPE_proc 
                   )
# 123 "Parser.fsy"
                 :  typ ));
# 663 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                           _1 
                   )
# 126 "Parser.fsy"
                 :  quadType list ));
# 674 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                          _1 
                   )
# 128 "Parser.fsy"
                 :  quadType list ));
# 685 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                 _1 
                   )
# 131 "Parser.fsy"
                 : 'local_def_list));
# 696 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                _2@_1 
                   )
# 133 "Parser.fsy"
                 : 'local_def_list));
# 708 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                             newVariable (id_make _1) _3 false |>ignore; [] 
                   )
# 136 "Parser.fsy"
                 :  quadType list ));
# 720 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                           newVariable (id_make _1) (TYPE_array (_3,_5)) true |>ignore; [] 
                   )
# 138 "Parser.fsy"
                 :  quadType list ));
# 733 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                  
                     let p=FindPosition parseState
                     error "Syntax Error at %A: Invalid Variable Definition %s: ';' or [integer] expected\n" p _1 |>ignore; [] 
                   )
# 140 "Parser.fsy"
                 :  quadType list ));
# 747 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                         
                     let p=FindPosition parseState
                     error "Syntax Error at %A: Invalid Variable Definition %s: Invalid datatype after ':'\n" p _1 |>ignore; [] 
                   )
# 144 "Parser.fsy"
                 :  quadType list ));
# 760 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                       [] 
                   )
# 149 "Parser.fsy"
                 :  quadType list ));
# 770 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                       syntaxError parseState "Syntax Error at %A - %A: Cannot have declarations among statements\n" []
                   )
# 151 "Parser.fsy"
                 :  quadType list ));
# 781 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                           processAssignment parseState _1 _3 
                   )
# 153 "Parser.fsy"
                 :  quadType list ));
# 793 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                           _1 
                   )
# 155 "Parser.fsy"
                 :  quadType list ));
# 804 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                 processFunctionCallStmt parseState _1 
                   )
# 157 "Parser.fsy"
                 :  quadType list ));
# 815 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                          processIfStmt parseState _3 _5 
                   )
# 159 "Parser.fsy"
                 :  quadType list ));
# 827 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                                      processIfElseStmt parseState _3 _5 _7 
                   )
# 161 "Parser.fsy"
                 :  quadType list ));
# 840 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                             processWhileStmt parseState _3 _5 
                   )
# 163 "Parser.fsy"
                 :  quadType list ));
# 852 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                processReturnStmt parseState 
                   )
# 165 "Parser.fsy"
                 :  quadType list ));
# 862 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                     processReturnExpressionStmt parseState _2 
                   )
# 167 "Parser.fsy"
                 :  quadType list ));
# 873 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Assignment - Expression expected\n" []
                   )
# 169 "Parser.fsy"
                 :  quadType list ));
# 884 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                     syntaxError parseState "Syntax Error at %A - %A: Invalid Assignment - '=' expected\n" []
                   )
# 171 "Parser.fsy"
                 :  quadType list ));
# 895 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" []
                   )
# 173 "Parser.fsy"
                 :  quadType list ));
# 906 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                         syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" []
                   )
# 175 "Parser.fsy"
                 :  quadType list ));
# 918 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" []
                   )
# 177 "Parser.fsy"
                 :  quadType list ));
# 929 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                      syntaxError parseState "Syntax Error at %A - %A: Invalid Return Statement\n" []
                   )
# 179 "Parser.fsy"
                 :  quadType list ));
# 939 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Statement\n" []
                   )
# 181 "Parser.fsy"
                 :  quadType list ));
# 949 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                       _1 
                   )
# 184 "Parser.fsy"
                 :  quadType list ));
# 960 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                 _2@_1 
                   )
# 186 "Parser.fsy"
                 :  quadType list ));
# 972 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                [] 
                   )
# 189 "Parser.fsy"
                 :  quadType list ));
# 982 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                          _2 
                   )
# 191 "Parser.fsy"
                 :  quadType list ));
# 993 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                      syntaxError parseState "Syntax Error at %A - %A: Invalid Function body\n" []
                   )
# 193 "Parser.fsy"
                 :  quadType list ));
# 1003 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                   processFunctionCall parseState _1 ([],[]) 
                   )
# 196 "Parser.fsy"
                 :  expressionType ));
# 1014 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  (expressionType list)*(pass_mode list) )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                             processFunctionCall parseState _1 _3 
                   )
# 198 "Parser.fsy"
                 :  expressionType ));
# 1026 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                         ([_1],[PASS_BY_VALUE]) 
                   )
# 201 "Parser.fsy"
                 :  (expressionType list)*(pass_mode list) ));
# 1037 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                            ([_1],[PASS_BY_REFERENCE]) 
                   )
# 203 "Parser.fsy"
                 :  (expressionType list)*(pass_mode list) ));
# 1048 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  (expressionType list)*(pass_mode list) )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                       ((_3::(fst _1)),(PASS_BY_VALUE::(snd _1))) 
                   )
# 205 "Parser.fsy"
                 :  (expressionType list)*(pass_mode list) ));
# 1060 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  (expressionType list)*(pass_mode list) )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                            ((_3::(fst _1)),(PASS_BY_REFERENCE::(snd _1))) 
                   )
# 207 "Parser.fsy"
                 :  (expressionType list)*(pass_mode list) ));
# 1072 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                 { Code = []; Place = Int(_1) } 
                   )
# 211 "Parser.fsy"
                 :  expressionType ));
# 1083 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                  { Code = []; Place = Byte(_1) } 
                   )
# 213 "Parser.fsy"
                 :  expressionType ));
# 1094 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                     processLValueExpression parseState _1 
                   )
# 215 "Parser.fsy"
                 :  expressionType ));
# 1105 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                                _2 
                   )
# 217 "Parser.fsy"
                 :  expressionType ));
# 1116 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                       processFunctionCallExpression parseState _1 
                   )
# 219 "Parser.fsy"
                 :  expressionType ));
# 1127 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                                 processExpression parseState (QuadAdd) _2 None 
                   )
# 221 "Parser.fsy"
                 :  expressionType ));
# 1138 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                  processExpression parseState (QuadSub) _2 None 
                   )
# 223 "Parser.fsy"
                 :  expressionType ));
# 1149 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                            processExpression parseState (QuadSub) _1 (Some _3) 
                   )
# 225 "Parser.fsy"
                 :  expressionType ));
# 1161 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                           processExpression parseState (QuadAdd) _1 (Some _3) 
                   )
# 227 "Parser.fsy"
                 :  expressionType ));
# 1173 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                            processExpression parseState (QuadMult) _1 (Some _3) 
                   )
# 229 "Parser.fsy"
                 :  expressionType ));
# 1185 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                            processExpression parseState (QuadDiv) _1 (Some _3) 
                   )
# 231 "Parser.fsy"
                 :  expressionType ));
# 1197 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                          processExpression parseState (QuadMod) _1 (Some _3) 
                   )
# 233 "Parser.fsy"
                 :  expressionType ));
# 1209 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 235 "Parser.fsy"
                 :  expressionType ));
# 1220 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 237 "Parser.fsy"
                 :  expressionType ));
# 1231 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 239 "Parser.fsy"
                 :  expressionType ));
# 1242 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 241 "Parser.fsy"
                 :  expressionType ));
# 1253 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 243 "Parser.fsy"
                 :  expressionType ));
# 1264 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 245 "Parser.fsy"
                 :  expressionType ));
# 1275 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 247 "Parser.fsy"
                 :  expressionType ));
# 1286 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 249 "Parser.fsy"
                 :  expressionType ));
# 1297 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 251 "Parser.fsy"
                 :  expressionType ));
# 1308 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 253 "Parser.fsy"
                 :  expressionType ));
# 1319 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                          { Code = []; Place = String(_1) } 
                   )
# 257 "Parser.fsy"
                 :  expressionType ));
# 1330 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                          ProcessLValue1 parseState _1 
                   )
# 259 "Parser.fsy"
                 :  expressionType ));
# 1341 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                    ProcessLValue2 parseState _1 
                   )
# 262 "Parser.fsy"
                 :  expressionType ));
# 1352 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "Parser.fsy"
                                                  ProcessLValue3 parseState _1 _3 
                   )
# 264 "Parser.fsy"
                 :  expressionType ));
# 1364 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                    processTrue () 
                   )
# 267 "Parser.fsy"
                 :  conditionType ));
# 1374 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "Parser.fsy"
                                     processFalse () 
                   )
# 269 "Parser.fsy"
                 :  conditionType ));
# 1384 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                                _2 
                   )
# 271 "Parser.fsy"
                 :  conditionType ));
# 1395 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                      { Code=_2.Code ; True=_2.False ; False=_2.True } 
                   )
# 273 "Parser.fsy"
                 :  conditionType ));
# 1406 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "Parser.fsy"
                                              processComparison parseState (functionize _2) _1 _3 
                   )
# 275 "Parser.fsy"
                 :  conditionType ));
# 1419 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                                           processAndCondition parseState _1 _3 
                   )
# 277 "Parser.fsy"
                 :  conditionType ));
# 1431 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "Parser.fsy"
                                          processOrCondition parseState _1 _3 
                   )
# 279 "Parser.fsy"
                 :  conditionType ));
# 1443 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "Parser.fsy"
                                               syntaxError parseState "Syntax Error at %A: Invalid Condition\n" voidCondition
                   )
# 281 "Parser.fsy"
                 :  conditionType ));
# 1455 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "Parser.fsy"
                                               syntaxError parseState "Syntax Error at %A: Invalid Condition\n" voidCondition
                   )
# 283 "Parser.fsy"
                 :  conditionType ));
# 1467 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "Parser.fsy"
                                  "EQ" 
                   )
# 286 "Parser.fsy"
                 :  string ));
# 1477 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "Parser.fsy"
                                  "NE" 
                   )
# 288 "Parser.fsy"
                 :  string ));
# 1487 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                  "LT" 
                   )
# 290 "Parser.fsy"
                 :  string ));
# 1497 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                                  "GT" 
                   )
# 292 "Parser.fsy"
                 :  string ));
# 1507 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "Parser.fsy"
                                  "LE" 
                   )
# 294 "Parser.fsy"
                 :  string ));
# 1517 "obj\x86\Debug\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                                  "GE" 
                   )
# 296 "Parser.fsy"
                 :  string ));
|]
# 1528 "obj\x86\Debug\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  quadType list  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
