// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Types
open Symbol
open Error
open Identifier
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing

exception SemanticError
let lexeme = LexBuffer<char>.LexemeString
let inline EHandler (ctxt: ParseErrorContext<_>) = 
    let p=(ctxt.ParseState.InputStartPosition(1).Line,ctxt.ParseState.InputStartPosition(1).Column)
    (error "Syntax Error at %A: Unrecognized Syntax Error\n" p )
let parse_error_rich = None
let inline getScopeFunction () = (!currentScope).sco_function.Value
let inline getReturnType f = match f.entry_info with ENTRY_function x-> x.function_result
let inline getParameterTypeAndPassMode e = match e.entry_info with ENTRY_parameter p ->(p.parameter_type,p.parameter_mode)
let inline checkExprSemantics op x1 x2 (state:IParseState) txt =
    if (op x1 x2) then x1 else let (ps,pe)=state.ResultRange
                               error txt (ps.Line,ps.Column) (pe.Line,pe.Column)
                               |>ignore; TYPE_none
let inline checkCondSemantics x1 x2 (state:IParseState) txt =
    if (x1=x2) then () else let (ps,pe)=state.ResultRange
                            error txt (ps.Line,ps.Column) (pe.Line,pe.Column) |> ignore
let inline checkStmtSemantics x1 x2 (state:IParseState) txt =
    if (x1=x2) then () else let (ps,pe)=state.ResultRange
                            error txt (ps.Line,ps.Column) (pe.Line,pe.Column) |> ignore
let inline checkStmtSemantics2 typ (state:IParseState) =
    let t = () |> getScopeFunction |> getReturnType
    if (t = typ) then () else let (ps,pe)=state.ResultRange
                              error "Semantic Error at %A -%A: \n\tType Mismatch: Return type must be %A but is %A\n" (ps.Line,ps.Column) (pe.Line,pe.Column) t typ |> ignore
let inline checkParameters flag e p =
    let ep=getParameterTypeAndPassMode e
    match ep, p with
    |(t1,p1),(t2,p2) when t1=t2 && (if p1=PASS_BY_REFERENCE then (p1=p2) else true)->flag
    |_ ->false  
let inline syntaxError (state:IParseState) txt typ=
    let (ps,pe)=state.ResultRange
    error txt (ps.Line,ps.Column) (pe.Line,pe.Column)
    |>ignore;typ
let setInitialPos (lexbuf:LexBuffer<char>) filename = 
       lexbuf.EndPos <- { pos_bol = 0;
                          pos_fname=filename; 
                          pos_cnum=0;
                          pos_lnum=1 }

let LibraryFunctions = [
    ("writeInteger",[("win" ,TYPE_int                 ,PASS_BY_VALUE    )],TYPE_proc);
    ("writeByte"   ,[("wby" ,TYPE_byte                ,PASS_BY_VALUE    )],TYPE_proc);
    ("writeChar"   ,[("wch" ,TYPE_byte                ,PASS_BY_VALUE    )],TYPE_proc);
    ("writeString" ,[("wst" ,TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)],TYPE_proc);
    ("readInteger" ,[]                                                    ,TYPE_int );
    ("readByte"    ,[]                                                    ,TYPE_byte);
    ("readChar"    ,[]                                                    ,TYPE_byte);
    ("readString"  ,[("rst1",TYPE_int                 ,PASS_BY_VALUE    )
                    ;("rst2",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)],TYPE_proc);
    ("extend"      ,[("ext" ,TYPE_byte                ,PASS_BY_VALUE    )],TYPE_proc);
    ("shrink"      ,[("scr" ,TYPE_int                 ,PASS_BY_VALUE    )],TYPE_proc);
    ("strlen"      ,[("stl" ,TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)],TYPE_int );
    ("strcmp"      ,[("cmp1",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)
                    ;("cmp2",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)],TYPE_int );
    ("strcpy"      ,[("cpyd",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)
                    ;("cpys",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)],TYPE_proc);
    ("strcat"      ,[("catd",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)
                    ;("cats",TYPE_array (TYPE_byte,-1),PASS_BY_REFERENCE)],TYPE_proc);
                       ]

let bulkLoad (fName,parameterList,fType) = 
    let f = newFunction (id_make fName) true
    List.iter (fun (pName,pType,pPass) -> newParameter (id_make pName) pType pPass f true |> ignore ) parameterList
    endFunctionHeader f fType

initSymbolTable 256
List.iter bulkLoad LibraryFunctions

# 82 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EQ
  | NE
  | LT
  | LE
  | GT
  | GE
  | PLUS
  | MINUS
  | ASTER
  | SLASH
  | MOD
  | NOT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LSBR
  | RSBR
  | LCBR
  | RCBR
  | COMMA
  | COLON
  | SEMICOLON
  | ASSIGN
  | T_BYTE
  | T_ELSE
  | T_FALSE
  | T_IF
  | T_INT
  | T_PROC
  | T_REF
  | T_RETURN
  | T_WHILE
  | T_TRUE
  | T_EOF
  | ID of (string)
  | STRING of (string)
  | INT of (int)
  | BYTE of (byte)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_ASTER
    | TOKEN_SLASH
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LSBR
    | TOKEN_RSBR
    | TOKEN_LCBR
    | TOKEN_RCBR
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_ASSIGN
    | TOKEN_T_BYTE
    | TOKEN_T_ELSE
    | TOKEN_T_FALSE
    | TOKEN_T_IF
    | TOKEN_T_INT
    | TOKEN_T_PROC
    | TOKEN_T_REF
    | TOKEN_T_RETURN
    | TOKEN_T_WHILE
    | TOKEN_T_TRUE
    | TOKEN_T_EOF
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_BYTE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_func_def
    | NONTERM_func_head
    | NONTERM_func_params
    | NONTERM_fpar_list
    | NONTERM_fpar_def
    | NONTERM_data_type
    | NONTERM_type
    | NONTERM_r_type
    | NONTERM_local_def
    | NONTERM_local_def_list
    | NONTERM_var_def
    | NONTERM_stmt
    | NONTERM_stmt_list
    | NONTERM_compound_stmt
    | NONTERM_func_call
    | NONTERM_expr_list
    | NONTERM_expr
    | NONTERM_ref_value
    | NONTERM_l_value
    | NONTERM_cond
    | NONTERM_compop

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EQ  -> 0 
  | NE  -> 1 
  | LT  -> 2 
  | LE  -> 3 
  | GT  -> 4 
  | GE  -> 5 
  | PLUS  -> 6 
  | MINUS  -> 7 
  | ASTER  -> 8 
  | SLASH  -> 9 
  | MOD  -> 10 
  | NOT  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | LPAREN  -> 14 
  | RPAREN  -> 15 
  | LSBR  -> 16 
  | RSBR  -> 17 
  | LCBR  -> 18 
  | RCBR  -> 19 
  | COMMA  -> 20 
  | COLON  -> 21 
  | SEMICOLON  -> 22 
  | ASSIGN  -> 23 
  | T_BYTE  -> 24 
  | T_ELSE  -> 25 
  | T_FALSE  -> 26 
  | T_IF  -> 27 
  | T_INT  -> 28 
  | T_PROC  -> 29 
  | T_REF  -> 30 
  | T_RETURN  -> 31 
  | T_WHILE  -> 32 
  | T_TRUE  -> 33 
  | T_EOF  -> 34 
  | ID _ -> 35 
  | STRING _ -> 36 
  | INT _ -> 37 
  | BYTE _ -> 38 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EQ 
  | 1 -> TOKEN_NE 
  | 2 -> TOKEN_LT 
  | 3 -> TOKEN_LE 
  | 4 -> TOKEN_GT 
  | 5 -> TOKEN_GE 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_ASTER 
  | 9 -> TOKEN_SLASH 
  | 10 -> TOKEN_MOD 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_LPAREN 
  | 15 -> TOKEN_RPAREN 
  | 16 -> TOKEN_LSBR 
  | 17 -> TOKEN_RSBR 
  | 18 -> TOKEN_LCBR 
  | 19 -> TOKEN_RCBR 
  | 20 -> TOKEN_COMMA 
  | 21 -> TOKEN_COLON 
  | 22 -> TOKEN_SEMICOLON 
  | 23 -> TOKEN_ASSIGN 
  | 24 -> TOKEN_T_BYTE 
  | 25 -> TOKEN_T_ELSE 
  | 26 -> TOKEN_T_FALSE 
  | 27 -> TOKEN_T_IF 
  | 28 -> TOKEN_T_INT 
  | 29 -> TOKEN_T_PROC 
  | 30 -> TOKEN_T_REF 
  | 31 -> TOKEN_T_RETURN 
  | 32 -> TOKEN_T_WHILE 
  | 33 -> TOKEN_T_TRUE 
  | 34 -> TOKEN_T_EOF 
  | 35 -> TOKEN_ID 
  | 36 -> TOKEN_STRING 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_BYTE 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_func_def 
    | 4 -> NONTERM_func_def 
    | 5 -> NONTERM_func_def 
    | 6 -> NONTERM_func_def 
    | 7 -> NONTERM_func_head 
    | 8 -> NONTERM_func_params 
    | 9 -> NONTERM_func_params 
    | 10 -> NONTERM_fpar_list 
    | 11 -> NONTERM_fpar_list 
    | 12 -> NONTERM_fpar_def 
    | 13 -> NONTERM_fpar_def 
    | 14 -> NONTERM_data_type 
    | 15 -> NONTERM_data_type 
    | 16 -> NONTERM_type 
    | 17 -> NONTERM_type 
    | 18 -> NONTERM_r_type 
    | 19 -> NONTERM_r_type 
    | 20 -> NONTERM_local_def 
    | 21 -> NONTERM_local_def 
    | 22 -> NONTERM_local_def_list 
    | 23 -> NONTERM_local_def_list 
    | 24 -> NONTERM_var_def 
    | 25 -> NONTERM_var_def 
    | 26 -> NONTERM_var_def 
    | 27 -> NONTERM_var_def 
    | 28 -> NONTERM_stmt 
    | 29 -> NONTERM_stmt 
    | 30 -> NONTERM_stmt 
    | 31 -> NONTERM_stmt 
    | 32 -> NONTERM_stmt 
    | 33 -> NONTERM_stmt 
    | 34 -> NONTERM_stmt 
    | 35 -> NONTERM_stmt 
    | 36 -> NONTERM_stmt 
    | 37 -> NONTERM_stmt 
    | 38 -> NONTERM_stmt 
    | 39 -> NONTERM_stmt 
    | 40 -> NONTERM_stmt 
    | 41 -> NONTERM_stmt 
    | 42 -> NONTERM_stmt 
    | 43 -> NONTERM_stmt 
    | 44 -> NONTERM_stmt 
    | 45 -> NONTERM_stmt_list 
    | 46 -> NONTERM_stmt_list 
    | 47 -> NONTERM_compound_stmt 
    | 48 -> NONTERM_compound_stmt 
    | 49 -> NONTERM_compound_stmt 
    | 50 -> NONTERM_func_call 
    | 51 -> NONTERM_func_call 
    | 52 -> NONTERM_expr_list 
    | 53 -> NONTERM_expr_list 
    | 54 -> NONTERM_expr_list 
    | 55 -> NONTERM_expr_list 
    | 56 -> NONTERM_expr 
    | 57 -> NONTERM_expr 
    | 58 -> NONTERM_expr 
    | 59 -> NONTERM_expr 
    | 60 -> NONTERM_expr 
    | 61 -> NONTERM_expr 
    | 62 -> NONTERM_expr 
    | 63 -> NONTERM_expr 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_expr 
    | 66 -> NONTERM_expr 
    | 67 -> NONTERM_expr 
    | 68 -> NONTERM_expr 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr 
    | 73 -> NONTERM_expr 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_ref_value 
    | 79 -> NONTERM_ref_value 
    | 80 -> NONTERM_l_value 
    | 81 -> NONTERM_l_value 
    | 82 -> NONTERM_cond 
    | 83 -> NONTERM_cond 
    | 84 -> NONTERM_cond 
    | 85 -> NONTERM_cond 
    | 86 -> NONTERM_cond 
    | 87 -> NONTERM_cond 
    | 88 -> NONTERM_cond 
    | 89 -> NONTERM_cond 
    | 90 -> NONTERM_cond 
    | 91 -> NONTERM_compop 
    | 92 -> NONTERM_compop 
    | 93 -> NONTERM_compop 
    | 94 -> NONTERM_compop 
    | 95 -> NONTERM_compop 
    | 96 -> NONTERM_compop 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | ASTER  -> "ASTER" 
  | SLASH  -> "SLASH" 
  | MOD  -> "MOD" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LSBR  -> "LSBR" 
  | RSBR  -> "RSBR" 
  | LCBR  -> "LCBR" 
  | RCBR  -> "RCBR" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | ASSIGN  -> "ASSIGN" 
  | T_BYTE  -> "T_BYTE" 
  | T_ELSE  -> "T_ELSE" 
  | T_FALSE  -> "T_FALSE" 
  | T_IF  -> "T_IF" 
  | T_INT  -> "T_INT" 
  | T_PROC  -> "T_PROC" 
  | T_REF  -> "T_REF" 
  | T_RETURN  -> "T_RETURN" 
  | T_WHILE  -> "T_WHILE" 
  | T_TRUE  -> "T_TRUE" 
  | T_EOF  -> "T_EOF" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | BYTE _ -> "BYTE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | ASTER  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LSBR  -> (null : System.Object) 
  | RSBR  -> (null : System.Object) 
  | LCBR  -> (null : System.Object) 
  | RCBR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | T_BYTE  -> (null : System.Object) 
  | T_ELSE  -> (null : System.Object) 
  | T_FALSE  -> (null : System.Object) 
  | T_IF  -> (null : System.Object) 
  | T_INT  -> (null : System.Object) 
  | T_PROC  -> (null : System.Object) 
  | T_REF  -> (null : System.Object) 
  | T_RETURN  -> (null : System.Object) 
  | T_WHILE  -> (null : System.Object) 
  | T_TRUE  -> (null : System.Object) 
  | T_EOF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BYTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 11us; 65535us; 0us; 2us; 5us; 37us; 7us; 37us; 64us; 37us; 66us; 37us; 71us; 37us; 81us; 37us; 83us; 37us; 85us; 37us; 93us; 37us; 95us; 37us; 11us; 65535us; 0us; 4us; 5us; 4us; 7us; 4us; 64us; 4us; 66us; 4us; 71us; 4us; 81us; 4us; 83us; 4us; 85us; 4us; 93us; 4us; 95us; 4us; 1us; 65535us; 4us; 5us; 1us; 65535us; 14us; 18us; 2us; 65535us; 14us; 22us; 23us; 24us; 5us; 65535us; 16us; 35us; 20us; 35us; 26us; 27us; 28us; 32us; 41us; 42us; 1us; 65535us; 28us; 29us; 2us; 65535us; 16us; 17us; 20us; 21us; 10us; 65535us; 5us; 39us; 7us; 40us; 64us; 53us; 66us; 53us; 71us; 53us; 81us; 53us; 83us; 53us; 85us; 53us; 93us; 53us; 95us; 53us; 1us; 65535us; 5us; 7us; 10us; 65535us; 5us; 38us; 7us; 38us; 64us; 38us; 66us; 38us; 71us; 38us; 81us; 38us; 83us; 38us; 85us; 38us; 93us; 38us; 95us; 38us; 8us; 65535us; 64us; 65us; 66us; 67us; 71us; 72us; 81us; 82us; 83us; 84us; 85us; 86us; 93us; 94us; 95us; 92us; 1us; 65535us; 95us; 93us; 10us; 65535us; 5us; 6us; 7us; 8us; 64us; 58us; 66us; 58us; 71us; 58us; 81us; 58us; 83us; 58us; 85us; 58us; 93us; 58us; 95us; 58us; 34us; 65535us; 55us; 118us; 62us; 118us; 64us; 59us; 66us; 59us; 69us; 118us; 71us; 59us; 73us; 118us; 81us; 59us; 83us; 59us; 85us; 59us; 93us; 59us; 95us; 59us; 101us; 118us; 107us; 118us; 113us; 118us; 114us; 118us; 119us; 118us; 121us; 118us; 137us; 118us; 138us; 118us; 139us; 118us; 140us; 118us; 141us; 118us; 150us; 118us; 151us; 118us; 152us; 118us; 153us; 118us; 154us; 118us; 156us; 118us; 162us; 118us; 164us; 118us; 167us; 118us; 168us; 118us; 169us; 118us; 1us; 65535us; 101us; 103us; 26us; 65535us; 55us; 56us; 62us; 134us; 69us; 134us; 73us; 75us; 101us; 105us; 107us; 108us; 113us; 115us; 114us; 116us; 119us; 120us; 121us; 122us; 137us; 123us; 138us; 124us; 139us; 125us; 140us; 126us; 141us; 127us; 150us; 128us; 151us; 129us; 152us; 130us; 153us; 131us; 154us; 132us; 156us; 133us; 162us; 134us; 164us; 135us; 167us; 134us; 168us; 134us; 169us; 136us; 2us; 65535us; 101us; 106us; 107us; 109us; 34us; 65535us; 55us; 112us; 62us; 112us; 64us; 54us; 66us; 54us; 69us; 112us; 71us; 54us; 73us; 112us; 81us; 54us; 83us; 54us; 85us; 54us; 93us; 54us; 95us; 54us; 101us; 112us; 107us; 112us; 113us; 112us; 114us; 112us; 119us; 112us; 121us; 112us; 137us; 112us; 138us; 112us; 139us; 112us; 140us; 112us; 141us; 112us; 150us; 112us; 151us; 112us; 152us; 112us; 153us; 112us; 154us; 112us; 156us; 112us; 162us; 112us; 164us; 112us; 167us; 112us; 168us; 112us; 169us; 112us; 6us; 65535us; 62us; 63us; 69us; 70us; 114us; 160us; 162us; 163us; 167us; 165us; 168us; 166us; 3us; 65535us; 116us; 164us; 134us; 164us; 149us; 169us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 15us; 27us; 29us; 31us; 34us; 40us; 42us; 45us; 56us; 58us; 69us; 78us; 80us; 91us; 126us; 128us; 155us; 158us; 193us; 200us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 4us; 3us; 4us; 5us; 6us; 4us; 3us; 4us; 5us; 6us; 1us; 3us; 3us; 4us; 6us; 23us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 5us; 7us; 24us; 25us; 26us; 27us; 9us; 7us; 24us; 25us; 26us; 27us; 50us; 51us; 80us; 81us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 9us; 11us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 2us; 12us; 13us; 2us; 12us; 13us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 4us; 24us; 25us; 26us; 27us; 3us; 24us; 25us; 26us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 3us; 30us; 38us; 39us; 2us; 30us; 38us; 11us; 30us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 4us; 33us; 34us; 40us; 41us; 2us; 33us; 34us; 4us; 33us; 34us; 87us; 88us; 2us; 33us; 34us; 2us; 33us; 34us; 1us; 34us; 1us; 34us; 2us; 35us; 42us; 1us; 35us; 3us; 35us; 87us; 88us; 1us; 35us; 1us; 35us; 3us; 36us; 37us; 43us; 1us; 36us; 11us; 37us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 37us; 6us; 38us; 68us; 69us; 70us; 71us; 72us; 1us; 38us; 1us; 39us; 1us; 39us; 2us; 40us; 41us; 2us; 40us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 6us; 43us; 68us; 69us; 70us; 71us; 72us; 1us; 43us; 1us; 44us; 2us; 44us; 49us; 1us; 44us; 1us; 45us; 2us; 46us; 48us; 1us; 46us; 3us; 47us; 48us; 49us; 1us; 47us; 1us; 48us; 1us; 49us; 5us; 50us; 51us; 79us; 80us; 81us; 4us; 50us; 51us; 80us; 81us; 2us; 50us; 51us; 1us; 50us; 3us; 51us; 54us; 55us; 1us; 51us; 11us; 52us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 53us; 2us; 54us; 55us; 11us; 54us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 2us; 59us; 84us; 11us; 59us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 13us; 59us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 86us; 89us; 1us; 59us; 1us; 60us; 1us; 61us; 11us; 61us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 1us; 62us; 11us; 62us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 67us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 68us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 69us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 70us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 71us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 72us; 73us; 74us; 75us; 76us; 77us; 11us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 81us; 12us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 86us; 89us; 11us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 86us; 11us; 63us; 64us; 65us; 66us; 67us; 73us; 74us; 75us; 76us; 77us; 90us; 2us; 63us; 73us; 2us; 64us; 74us; 2us; 65us; 75us; 2us; 66us; 76us; 2us; 67us; 77us; 5us; 68us; 69us; 70us; 71us; 72us; 6us; 68us; 69us; 70us; 71us; 72us; 73us; 6us; 68us; 69us; 70us; 71us; 72us; 74us; 6us; 68us; 69us; 70us; 71us; 72us; 75us; 6us; 68us; 69us; 70us; 71us; 72us; 76us; 6us; 68us; 69us; 70us; 71us; 72us; 77us; 6us; 68us; 69us; 70us; 71us; 72us; 89us; 6us; 68us; 69us; 70us; 71us; 72us; 90us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 78us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 83us; 3us; 84us; 87us; 88us; 1us; 84us; 1us; 85us; 3us; 85us; 87us; 88us; 2us; 86us; 89us; 3us; 87us; 87us; 88us; 3us; 87us; 88us; 88us; 1us; 87us; 1us; 88us; 1us; 90us; 1us; 91us; 1us; 92us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 96us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 13us; 18us; 20us; 24us; 26us; 28us; 30us; 32us; 38us; 48us; 51us; 53us; 55us; 57us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 75us; 78us; 80us; 82us; 84us; 86us; 88us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 112us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 142us; 145us; 157us; 159us; 161us; 163us; 165us; 170us; 173us; 178us; 181us; 184us; 186us; 188us; 191us; 193us; 197us; 199us; 201us; 205us; 207us; 219us; 221us; 228us; 230us; 232us; 234us; 237us; 240us; 242us; 244us; 246us; 248us; 255us; 257us; 259us; 262us; 264us; 266us; 269us; 271us; 275us; 277us; 279us; 281us; 287us; 292us; 295us; 297us; 301us; 303us; 315us; 317us; 320us; 332us; 334us; 336us; 338us; 340us; 342us; 345us; 357us; 371us; 373us; 375us; 377us; 389us; 391us; 403us; 415us; 427us; 439us; 451us; 463us; 475us; 487us; 499us; 511us; 523us; 535us; 548us; 560us; 572us; 575us; 578us; 581us; 584us; 587us; 593us; 600us; 607us; 614us; 621us; 628us; 635us; 642us; 644us; 646us; 648us; 650us; 652us; 654us; 656us; 658us; 660us; 662us; 666us; 668us; 670us; 674us; 677us; 681us; 685us; 687us; 689us; 691us; 693us; 695us; 697us; 699us; 701us; |]
let _fsyacc_action_rows = 176
let _fsyacc_actionTableElements = [|2us; 32768us; 35us; 11us; 39us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 1us; 32768us; 14us; 14us; 3us; 32768us; 18us; 95us; 35us; 12us; 39us; 9us; 0us; 16387us; 3us; 32768us; 18us; 95us; 35us; 12us; 39us; 10us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 1us; 16391us; 21us; 41us; 5us; 16391us; 14us; 101us; 16us; 156us; 21us; 41us; 23us; 16464us; 39us; 16464us; 2us; 32768us; 15us; 15us; 35us; 25us; 1us; 32768us; 21us; 16us; 3us; 32768us; 24us; 31us; 28us; 30us; 29us; 36us; 0us; 16392us; 2us; 32768us; 15us; 19us; 20us; 23us; 1us; 32768us; 21us; 20us; 3us; 32768us; 24us; 31us; 28us; 30us; 29us; 36us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 35us; 25us; 0us; 16395us; 1us; 32768us; 21us; 26us; 3us; 32768us; 24us; 31us; 28us; 30us; 30us; 28us; 0us; 16396us; 2us; 32768us; 24us; 31us; 28us; 30us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 1us; 16400us; 16us; 33us; 1us; 32768us; 17us; 34us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 3us; 32768us; 24us; 31us; 28us; 30us; 39us; 50us; 3us; 32768us; 16us; 44us; 22us; 43us; 39us; 48us; 0us; 16408us; 1us; 32768us; 37us; 45us; 1us; 32768us; 17us; 46us; 1us; 32768us; 22us; 47us; 0us; 16409us; 1us; 32768us; 22us; 49us; 0us; 16410us; 1us; 32768us; 22us; 51us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 2us; 32768us; 23us; 55us; 39us; 79us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 77us; 6us; 32768us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 22us; 57us; 0us; 16414us; 0us; 16415us; 1us; 32768us; 22us; 60us; 0us; 16416us; 2us; 32768us; 14us; 62us; 39us; 81us; 10us; 32768us; 6us; 119us; 7us; 121us; 11us; 162us; 14us; 114us; 26us; 159us; 33us; 158us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 149us; 3us; 32768us; 12us; 167us; 13us; 168us; 15us; 64us; 7us; 32768us; 18us; 95us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 1us; 16417us; 25us; 66us; 7us; 32768us; 18us; 95us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 0us; 16418us; 2us; 32768us; 14us; 69us; 39us; 85us; 10us; 32768us; 6us; 119us; 7us; 121us; 11us; 162us; 14us; 114us; 26us; 159us; 33us; 158us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 149us; 3us; 32768us; 12us; 167us; 13us; 168us; 15us; 71us; 7us; 32768us; 18us; 95us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 0us; 16419us; 8us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 22us; 74us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 87us; 0us; 16420us; 6us; 32768us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 22us; 76us; 0us; 16421us; 6us; 32768us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 22us; 78us; 0us; 16422us; 1us; 32768us; 22us; 80us; 0us; 16423us; 7us; 32768us; 18us; 95us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 1us; 16424us; 25us; 83us; 7us; 32768us; 18us; 95us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 0us; 16425us; 7us; 32768us; 18us; 95us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 0us; 16426us; 6us; 32768us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 22us; 88us; 0us; 16427us; 1us; 32768us; 22us; 91us; 2us; 32768us; 19us; 98us; 22us; 91us; 0us; 16428us; 0us; 16429us; 8us; 32768us; 18us; 95us; 19us; 97us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 89us; 0us; 16430us; 8us; 32768us; 18us; 95us; 19us; 96us; 22us; 52us; 27us; 61us; 31us; 73us; 32us; 68us; 35us; 13us; 39us; 90us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 7us; 16463us; 6us; 16464us; 7us; 16464us; 8us; 16464us; 9us; 16464us; 10us; 16464us; 14us; 101us; 16us; 156us; 2us; 16464us; 14us; 101us; 16us; 156us; 9us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 15us; 102us; 35us; 99us; 36us; 155us; 37us; 110us; 38us; 111us; 39us; 142us; 0us; 16434us; 2us; 32768us; 15us; 104us; 20us; 107us; 0us; 16435us; 5us; 16436us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 0us; 16437us; 8us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 99us; 36us; 155us; 37us; 110us; 38us; 111us; 39us; 142us; 5us; 16438us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 10us; 32768us; 6us; 119us; 7us; 121us; 11us; 162us; 14us; 114us; 26us; 159us; 33us; 158us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 149us; 6us; 32768us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 15us; 117us; 12us; 32768us; 0us; 170us; 1us; 171us; 2us; 172us; 3us; 174us; 4us; 173us; 5us; 175us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 15us; 117us; 0us; 16443us; 0us; 16444us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 0us; 16445us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 0us; 16446us; 3us; 16447us; 8us; 139us; 9us; 140us; 10us; 141us; 3us; 16448us; 8us; 139us; 9us; 140us; 10us; 141us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 3us; 16452us; 8us; 139us; 9us; 140us; 10us; 141us; 3us; 16453us; 8us; 139us; 9us; 140us; 10us; 141us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 6us; 32768us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 17us; 157us; 11us; 32768us; 0us; 170us; 1us; 171us; 2us; 172us; 3us; 174us; 4us; 173us; 5us; 175us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 5us; 16470us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 5us; 16474us; 6us; 138us; 7us; 137us; 8us; 139us; 9us; 140us; 10us; 141us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 143us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 144us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 145us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 146us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 147us; 5us; 32768us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 5us; 16457us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 5us; 16458us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 5us; 16459us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 5us; 16460us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 5us; 16461us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 5us; 16473us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 11us; 32768us; 0us; 170us; 1us; 171us; 2us; 172us; 3us; 174us; 4us; 173us; 5us; 175us; 6us; 151us; 7us; 150us; 8us; 152us; 9us; 153us; 10us; 154us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 0us; 16462us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 3us; 32768us; 12us; 167us; 13us; 168us; 15us; 161us; 0us; 16468us; 10us; 32768us; 6us; 119us; 7us; 121us; 11us; 162us; 14us; 114us; 26us; 159us; 33us; 158us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 149us; 0us; 16469us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 148us; 0us; 16471us; 1us; 16472us; 12us; 167us; 10us; 32768us; 6us; 119us; 7us; 121us; 11us; 162us; 14us; 114us; 26us; 159us; 33us; 158us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 149us; 10us; 32768us; 6us; 119us; 7us; 121us; 11us; 162us; 14us; 114us; 26us; 159us; 33us; 158us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 149us; 7us; 32768us; 6us; 119us; 7us; 121us; 14us; 113us; 35us; 100us; 37us; 110us; 38us; 111us; 39us; 142us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 0us; 16478us; 0us; 16479us; 0us; 16480us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 8us; 12us; 13us; 17us; 18us; 19us; 20us; 21us; 23us; 29us; 32us; 34us; 38us; 39us; 42us; 44us; 48us; 49us; 50us; 52us; 53us; 55us; 59us; 60us; 63us; 64us; 65us; 66us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 81us; 85us; 86us; 88us; 90us; 92us; 93us; 95us; 96us; 98us; 99us; 100us; 101us; 104us; 112us; 119us; 120us; 121us; 123us; 124us; 127us; 138us; 142us; 150us; 152us; 160us; 161us; 164us; 175us; 179us; 187us; 188us; 197us; 198us; 205us; 206us; 213us; 214us; 216us; 217us; 225us; 227us; 235us; 236us; 244us; 245us; 252us; 253us; 255us; 258us; 259us; 260us; 269us; 270us; 279us; 280us; 281us; 282us; 290us; 293us; 303us; 304us; 307us; 308us; 314us; 315us; 324us; 330us; 331us; 332us; 333us; 334us; 342us; 353us; 360us; 373us; 374us; 375us; 383us; 384us; 392us; 393us; 397us; 401us; 402us; 403us; 404us; 408us; 412us; 413us; 414us; 415us; 422us; 434us; 440us; 446us; 454us; 462us; 470us; 478us; 486us; 492us; 498us; 504us; 510us; 516us; 522us; 528us; 540us; 548us; 556us; 564us; 572us; 580us; 581us; 589us; 590us; 591us; 592us; 596us; 597us; 608us; 609us; 617us; 618us; 620us; 631us; 642us; 650us; 651us; 652us; 653us; 654us; 655us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 4us; 3us; 4us; 1us; 4us; 5us; 1us; 3us; 3us; 4us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 4us; 7us; 5us; 4us; 1us; 1us; 4us; 1us; 2us; 5us; 7us; 5us; 2us; 3us; 4us; 3us; 3us; 5us; 3us; 3us; 2us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 3us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 4us; 1us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16394us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 16397us; 16398us; 16399us; 65535us; 65535us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 16412us; 16413us; 65535us; 65535us; 65535us; 16414us; 16415us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 16420us; 65535us; 16421us; 65535us; 16422us; 65535us; 16423us; 65535us; 65535us; 65535us; 16425us; 65535us; 16426us; 65535us; 16427us; 65535us; 65535us; 16428us; 16429us; 65535us; 16430us; 65535us; 16431us; 16432us; 16433us; 65535us; 65535us; 65535us; 16434us; 65535us; 16435us; 65535us; 16437us; 65535us; 65535us; 16439us; 16440us; 16441us; 16442us; 65535us; 65535us; 65535us; 65535us; 16443us; 16444us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 65535us; 16465us; 16466us; 16467us; 65535us; 16468us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16475us; 16476us; 16477us; 16478us; 16479us; 16480us; |]
let _fsyacc_reductions ()  =    [| 
# 483 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 492 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                       () 
                   )
# 126 "Parser.fsy"
                 :  unit ));
# 503 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                    
                     let p=(parseState.InputStartPosition(1).Line,parseState.InputStartPosition(1).Column)
                     fatal "Unrecognized Parse Error at %A\n" p
                   )
# 127 "Parser.fsy"
                 :  unit ));
# 515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                                     closeScope () 
                   )
# 131 "Parser.fsy"
                 :  unit ));
# 528 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                                                    closeScope () 
                   )
# 132 "Parser.fsy"
                 :  unit ));
# 542 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                             
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Statements in Function declaration must be inside curly brackets\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     closeScope ()
                   )
# 133 "Parser.fsy"
                 :  unit ));
# 557 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                           
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Statements in Function body must be inside curly brackets\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     closeScope ()
                   )
# 138 "Parser.fsy"
                 :  unit ));
# 573 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                     
                     Some (newFunction (id_make _1) true) |> 
                     openScope
                   )
# 144 "Parser.fsy"
                 :  unit ));
# 586 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                               endFunctionHeader (getScopeFunction()) _4 
                   )
# 149 "Parser.fsy"
                 : 'func_params));
# 597 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                         endFunctionHeader (getScopeFunction()) _5 
                   )
# 150 "Parser.fsy"
                 : 'func_params));
# 609 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                           () 
                   )
# 152 "Parser.fsy"
                 :  unit ));
# 620 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                           () 
                   )
# 153 "Parser.fsy"
                 :  unit ));
# 632 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                    newParameter (id_make _1) _3 PASS_BY_VALUE (getScopeFunction()) true |>ignore 
                   )
# 155 "Parser.fsy"
                 :  unit ));
# 644 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                     newParameter (id_make _1) _4 PASS_BY_REFERENCE (getScopeFunction()) true |>ignore
                   )
# 156 "Parser.fsy"
                 :  unit ));
# 656 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                        TYPE_int 
                   )
# 158 "Parser.fsy"
                 :  typ ));
# 666 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                         TYPE_byte 
                   )
# 159 "Parser.fsy"
                 :  typ ));
# 676 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                       _1 
                   )
# 161 "Parser.fsy"
                 :  typ ));
# 687 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                 TYPE_array (_1,-1) 
                   )
# 162 "Parser.fsy"
                 :  typ ));
# 698 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                         _1 
                   )
# 164 "Parser.fsy"
                 :  typ ));
# 709 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                      TYPE_proc 
                   )
# 165 "Parser.fsy"
                 :  typ ));
# 719 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                           () 
                   )
# 167 "Parser.fsy"
                 :  unit ));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                          () 
                   )
# 168 "Parser.fsy"
                 :  unit ));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                 () 
                   )
# 170 "Parser.fsy"
                 : 'local_def_list));
# 752 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                                () 
                   )
# 171 "Parser.fsy"
                 : 'local_def_list));
# 764 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                             newVariable (id_make _1) _3 false |>ignore 
                   )
# 173 "Parser.fsy"
                 :  unit ));
# 776 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                           newVariable (id_make _1) (TYPE_array (_3,_5)) true |>ignore 
                   )
# 174 "Parser.fsy"
                 :  unit ));
# 789 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                  
                     let p=(parseState.InputStartPosition(3).Line,parseState.InputStartPosition(3).Column)
                     error "Syntax Error at %A: Invalid Variable Definition %s: ';' or [integer] expected\n" p _1 |>ignore
                   )
# 175 "Parser.fsy"
                 :  unit ));
# 803 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                         
                     let p=(parseState.InputStartPosition(3).Line,parseState.InputStartPosition(3).Column)
                     error "Syntax Error at %A: Invalid Variable Definition %s: Invalid datatype after ':'\n" p _1 |>ignore
                   )
# 178 "Parser.fsy"
                 :  unit ));
# 816 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                       () 
                   )
# 182 "Parser.fsy"
                 :  unit ));
# 826 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                       syntaxError parseState "Syntax Error at %A - %A: Cannot have declarations among statements\n" ()
                   )
# 183 "Parser.fsy"
                 :  unit ));
# 837 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                           checkStmtSemantics _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 184 "Parser.fsy"
                 :  unit ));
# 849 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                           () 
                   )
# 185 "Parser.fsy"
                 :  unit ));
# 860 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                 checkStmtSemantics _1 TYPE_proc parseState "Semantic Error at %A - %A: waiting TYPE_proc, got %A\n" 
                   )
# 186 "Parser.fsy"
                 :  unit ));
# 871 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                          () 
                   )
# 187 "Parser.fsy"
                 :  unit ));
# 883 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                                      () 
                   )
# 188 "Parser.fsy"
                 :  unit ));
# 896 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                             () 
                   )
# 189 "Parser.fsy"
                 :  unit ));
# 908 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                checkStmtSemantics2 TYPE_proc parseState 
                   )
# 190 "Parser.fsy"
                 :  unit ));
# 918 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                     checkStmtSemantics2 _2 parseState 
                   )
# 191 "Parser.fsy"
                 :  unit ));
# 929 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Assignment - Expression expected\n" ()
                   )
# 192 "Parser.fsy"
                 :  unit ));
# 940 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                     syntaxError parseState "Syntax Error at %A - %A: Invalid Assignment - '=' expected\n" ()
                   )
# 193 "Parser.fsy"
                 :  unit ));
# 951 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" ()
                   )
# 194 "Parser.fsy"
                 :  unit ));
# 962 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                                         syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" ()
                   )
# 195 "Parser.fsy"
                 :  unit ));
# 974 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" ()
                   )
# 196 "Parser.fsy"
                 :  unit ));
# 985 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                      syntaxError parseState "Syntax Error at %A - %A: Invalid Return Statement\n" ()
                   )
# 197 "Parser.fsy"
                 :  unit ));
# 995 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Statement\n" ()
                   )
# 198 "Parser.fsy"
                 :  unit ));
# 1005 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                       () 
                   )
# 200 "Parser.fsy"
                 : 'stmt_list));
# 1016 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                                 () 
                   )
# 201 "Parser.fsy"
                 : 'stmt_list));
# 1028 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                () 
                   )
# 203 "Parser.fsy"
                 :  unit ));
# 1038 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                          () 
                   )
# 204 "Parser.fsy"
                 :  unit ));
# 1049 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                     
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Invalid Function body\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     |>ignore
                   )
# 205 "Parser.fsy"
                 :  unit ));
# 1062 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                   
                     let p=(parseState.InputStartPosition(1).Line,parseState.InputStartPosition(1).Column)
                     match lookupEntry (id_make _1) LOOKUP_ALL_SCOPES true with
                     |Some e->
                         match e.entry_info with
                         |ENTRY_function f when f.function_paramlist=[] -> f.function_result
                         |ENTRY_function f ->
                              error "Semantic Error at %A: Parameter Mismatch:\n\t Expected Parameter List=%A \n\t Given empty Parameter List\n" p (List.map getParameterTypeAndPassMode f.function_paramlist)
                              |>ignore; TYPE_none
                         |_ ->
                              error "Semantic Error at %A: Given name is not a Function\n" p
                              |>ignore; TYPE_none
                     |None -> error "undeclared function" |>ignore;TYPE_none
                   )
# 212 "Parser.fsy"
                 :  typ ));
# 1085 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  (typ*pass_mode) list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                                            
                     let p=(parseState.InputStartPosition(1).Line,parseState.InputStartPosition(1).Column)
                     match lookupEntry (id_make _1) LOOKUP_ALL_SCOPES true with
                     |Some e->
                         match e.entry_info with
                         |ENTRY_function f when (f.function_paramlist.Length=_3.Length && List.fold2 checkParameters true f.function_paramlist (List.rev _3)) -> f.function_result
                         |ENTRY_function f -> error "Semantic Error at %A: Parameter Mismatch:\n\t Expected Parameter List = %A \n\t Actual Parameter List = %A\n" p (List.map getParameterTypeAndPassMode f.function_paramlist) _3 |>ignore; TYPE_none
                         |_ ->error "Semantic Error at %A: the given name is not  a function" |>ignore; TYPE_none
                     |None -> error "undeclared function" |>ignore; TYPE_none
                   )
# 226 "Parser.fsy"
                 :  typ ));
# 1105 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                         [(_1,PASS_BY_VALUE)] 
                   )
# 237 "Parser.fsy"
                 :  (typ*pass_mode) list ));
# 1116 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ*pass_mode )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                            [_1] 
                   )
# 238 "Parser.fsy"
                 :  (typ*pass_mode) list ));
# 1127 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  (typ*pass_mode) list )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                                       (_3,PASS_BY_VALUE)::_1 
                   )
# 239 "Parser.fsy"
                 :  (typ*pass_mode) list ));
# 1139 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  (typ*pass_mode) list )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ*pass_mode )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                                            _3::_1 
                   )
# 240 "Parser.fsy"
                 :  (typ*pass_mode) list ));
# 1151 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                 TYPE_int 
                   )
# 243 "Parser.fsy"
                 :  typ ));
# 1162 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "Parser.fsy"
                                  
                     if 0<=(int _1) && (int _1)<256 then TYPE_byte 
                     else let p = (parseState.InputStartPosition(1).Line,parseState.InputStartPosition(1).Column)
                          error "Semantic Error at %A: Too big for a byte\n" p 
                          |>ignore; TYPE_none
                   )
# 244 "Parser.fsy"
                 :  typ ));
# 1177 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                     _1 
                   )
# 250 "Parser.fsy"
                 :  typ ));
# 1188 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                                _2 
                   )
# 251 "Parser.fsy"
                 :  typ ));
# 1199 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                       checkExprSemantics (<>) _1 TYPE_proc parseState "Semantic Error at %A -%A: void Function call\n" 
                   )
# 252 "Parser.fsy"
                 :  typ ));
# 1210 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                                 _2 
                   )
# 253 "Parser.fsy"
                 :  typ ));
# 1221 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "Parser.fsy"
                                                  checkExprSemantics (=) _2 TYPE_int parseState "Semantic Error at %A - %A: Cannot negate anything but an Int\n" 
                   )
# 254 "Parser.fsy"
                 :  typ ));
# 1232 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                            checkExprSemantics (=) _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 255 "Parser.fsy"
                 :  typ ));
# 1244 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                           checkExprSemantics (=) _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 256 "Parser.fsy"
                 :  typ ));
# 1256 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                            checkExprSemantics (=) _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 257 "Parser.fsy"
                 :  typ ));
# 1268 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                            checkExprSemantics (=) _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 258 "Parser.fsy"
                 :  typ ));
# 1280 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                          checkExprSemantics (=) _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 259 "Parser.fsy"
                 :  typ ));
# 1292 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 260 "Parser.fsy"
                 :  typ ));
# 1303 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 261 "Parser.fsy"
                 :  typ ));
# 1314 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 262 "Parser.fsy"
                 :  typ ));
# 1325 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 263 "Parser.fsy"
                 :  typ ));
# 1336 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "Parser.fsy"
                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 264 "Parser.fsy"
                 :  typ ));
# 1347 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 265 "Parser.fsy"
                 :  typ ));
# 1358 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 266 "Parser.fsy"
                 :  typ ));
# 1369 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 267 "Parser.fsy"
                 :  typ ));
# 1380 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 268 "Parser.fsy"
                 :  typ ));
# 1391 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "Parser.fsy"
                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" TYPE_none 
                   )
# 269 "Parser.fsy"
                 :  typ ));
# 1402 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                          (TYPE_array (TYPE_byte,(*(fst _1).Length+1)*)-1),PASS_BY_REFERENCE) 
                   )
# 272 "Parser.fsy"
                 :  typ*pass_mode ));
# 1413 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                          
                     let p=(parseState.InputStartPosition(1).Line,parseState.InputStartPosition(1).Column)
                     match lookupEntry (id_make _1) LOOKUP_ALL_SCOPES true with
                     |Some e->
                         match e.entry_info with
                         |ENTRY_variable v ->  (v.variable_type,PASS_BY_REFERENCE)
                         |ENTRY_parameter p ->  (p.parameter_type,PASS_BY_REFERENCE)
                         |_ ->
                              error "Semantic Error at %A: The give name is neither a variable nor a parameter name\n" p
                              |>ignore; TYPE_none,PASS_BY_REFERENCE
                     |None -> error "undeclared variable" |> ignore; TYPE_none,PASS_BY_REFERENCE 
                   )
# 273 "Parser.fsy"
                 :  typ*pass_mode ));
# 1434 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                    
                     match lookupEntry (id_make _1) LOOKUP_ALL_SCOPES true with
                     |Some e->
                         match e.entry_info with
                         |ENTRY_variable v when v.variable_type=TYPE_int || v.variable_type=TYPE_byte -> v.variable_type
                         |ENTRY_parameter p when p.parameter_type=TYPE_int || p.parameter_type=TYPE_byte -> p.parameter_type
                         |_ ->error "l_value type mismatch: neither int nor byte\n" |>ignore; TYPE_none
                     |None -> error "undeclared variable" |>ignore; TYPE_none
                   )
# 285 "Parser.fsy"
                 :  typ ));
# 1452 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "Parser.fsy"
                                                  
                     match lookupEntry (id_make _1) LOOKUP_ALL_SCOPES true with
                     |Some e->
                         match e.entry_info with
                         |ENTRY_variable a -> 
                             match a.variable_type with
                             |TYPE_array (t,_) when _3=TYPE_int -> t
                             |_ ->error "type mismatch not an array or invalid index" |>ignore; TYPE_none
                         |_ ->error "type mismatch" |>ignore; TYPE_none
                     |None -> error "undeclared array" |>ignore; TYPE_none
                   )
# 295 "Parser.fsy"
                 :  typ ));
# 1473 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                    () 
                   )
# 309 "Parser.fsy"
                 :  unit ));
# 1483 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                     () 
                   )
# 310 "Parser.fsy"
                 :  unit ));
# 1493 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "Parser.fsy"
                                                () 
                   )
# 311 "Parser.fsy"
                 :  unit ));
# 1504 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "Parser.fsy"
                                      () 
                   )
# 312 "Parser.fsy"
                 :  unit ));
# 1515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  token )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "Parser.fsy"
                                              checkCondSemantics _1 _3 parseState "Semantic Error at %A - %A: Type Mismatch\n" 
                   )
# 313 "Parser.fsy"
                 :  unit ));
# 1528 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "Parser.fsy"
                                           () 
                   )
# 314 "Parser.fsy"
                 :  unit ));
# 1540 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "Parser.fsy"
                                          () 
                   )
# 315 "Parser.fsy"
                 :  unit ));
# 1552 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  token )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                               syntaxError parseState "Syntax Error at %A: Invalid Condition\n" ()
                   )
# 316 "Parser.fsy"
                 :  unit ));
# 1564 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  token )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "Parser.fsy"
                                               syntaxError parseState "Syntax Error at %A: Invalid Condition\n" ()
                   )
# 317 "Parser.fsy"
                 :  unit ));
# 1576 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "Parser.fsy"
                                  EQ 
                   )
# 319 "Parser.fsy"
                 :  token ));
# 1586 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "Parser.fsy"
                                  NE 
                   )
# 320 "Parser.fsy"
                 :  token ));
# 1596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "Parser.fsy"
                                  LT 
                   )
# 321 "Parser.fsy"
                 :  token ));
# 1606 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "Parser.fsy"
                                  GT 
                   )
# 322 "Parser.fsy"
                 :  token ));
# 1616 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "Parser.fsy"
                                  LE 
                   )
# 323 "Parser.fsy"
                 :  token ));
# 1626 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "Parser.fsy"
                                  GE 
                   )
# 324 "Parser.fsy"
                 :  token ));
|]
# 1637 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  unit  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
