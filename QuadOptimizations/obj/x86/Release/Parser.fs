// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Types
open QuadSupport
open Symbol
open Error
open ParserTypes
open AuxFunctions
open Identifier
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing


let parse_error_rich = None

initSymbolTable 256
List.iter bulkLoad LibraryFunctions

# 25 "obj\x86\Release\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EQ
  | NE
  | LT
  | LE
  | GT
  | GE
  | PLUS
  | MINUS
  | ASTER
  | SLASH
  | MOD
  | NOT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LSBR
  | RSBR
  | LCBR
  | RCBR
  | COMMA
  | COLON
  | SEMICOLON
  | ASSIGN
  | T_BYTE
  | T_ELSE
  | T_FALSE
  | T_IF
  | T_INT
  | T_PROC
  | T_REF
  | T_RETURN
  | T_WHILE
  | T_TRUE
  | T_EOF
  | ID of (string)
  | STRING of (string list*string)
  | INT of (int16)
  | BYTE of (byte)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_ASTER
    | TOKEN_SLASH
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LSBR
    | TOKEN_RSBR
    | TOKEN_LCBR
    | TOKEN_RCBR
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_ASSIGN
    | TOKEN_T_BYTE
    | TOKEN_T_ELSE
    | TOKEN_T_FALSE
    | TOKEN_T_IF
    | TOKEN_T_INT
    | TOKEN_T_PROC
    | TOKEN_T_REF
    | TOKEN_T_RETURN
    | TOKEN_T_WHILE
    | TOKEN_T_TRUE
    | TOKEN_T_EOF
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_BYTE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_func_def
    | NONTERM_func_head
    | NONTERM_func_params
    | NONTERM_fpar_list
    | NONTERM_fpar_def
    | NONTERM_data_type
    | NONTERM_type
    | NONTERM_r_type
    | NONTERM_local_def
    | NONTERM_local_def_list
    | NONTERM_var_def
    | NONTERM_stmt
    | NONTERM_stmt_list
    | NONTERM_compound_stmt
    | NONTERM_func_call
    | NONTERM_expr_list
    | NONTERM_expr
    | NONTERM_ref_value
    | NONTERM_l_value
    | NONTERM_cond
    | NONTERM_compop

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EQ  -> 0 
  | NE  -> 1 
  | LT  -> 2 
  | LE  -> 3 
  | GT  -> 4 
  | GE  -> 5 
  | PLUS  -> 6 
  | MINUS  -> 7 
  | ASTER  -> 8 
  | SLASH  -> 9 
  | MOD  -> 10 
  | NOT  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | LPAREN  -> 14 
  | RPAREN  -> 15 
  | LSBR  -> 16 
  | RSBR  -> 17 
  | LCBR  -> 18 
  | RCBR  -> 19 
  | COMMA  -> 20 
  | COLON  -> 21 
  | SEMICOLON  -> 22 
  | ASSIGN  -> 23 
  | T_BYTE  -> 24 
  | T_ELSE  -> 25 
  | T_FALSE  -> 26 
  | T_IF  -> 27 
  | T_INT  -> 28 
  | T_PROC  -> 29 
  | T_REF  -> 30 
  | T_RETURN  -> 31 
  | T_WHILE  -> 32 
  | T_TRUE  -> 33 
  | T_EOF  -> 34 
  | ID _ -> 35 
  | STRING _ -> 36 
  | INT _ -> 37 
  | BYTE _ -> 38 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EQ 
  | 1 -> TOKEN_NE 
  | 2 -> TOKEN_LT 
  | 3 -> TOKEN_LE 
  | 4 -> TOKEN_GT 
  | 5 -> TOKEN_GE 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_ASTER 
  | 9 -> TOKEN_SLASH 
  | 10 -> TOKEN_MOD 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_LPAREN 
  | 15 -> TOKEN_RPAREN 
  | 16 -> TOKEN_LSBR 
  | 17 -> TOKEN_RSBR 
  | 18 -> TOKEN_LCBR 
  | 19 -> TOKEN_RCBR 
  | 20 -> TOKEN_COMMA 
  | 21 -> TOKEN_COLON 
  | 22 -> TOKEN_SEMICOLON 
  | 23 -> TOKEN_ASSIGN 
  | 24 -> TOKEN_T_BYTE 
  | 25 -> TOKEN_T_ELSE 
  | 26 -> TOKEN_T_FALSE 
  | 27 -> TOKEN_T_IF 
  | 28 -> TOKEN_T_INT 
  | 29 -> TOKEN_T_PROC 
  | 30 -> TOKEN_T_REF 
  | 31 -> TOKEN_T_RETURN 
  | 32 -> TOKEN_T_WHILE 
  | 33 -> TOKEN_T_TRUE 
  | 34 -> TOKEN_T_EOF 
  | 35 -> TOKEN_ID 
  | 36 -> TOKEN_STRING 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_BYTE 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_func_def 
    | 4 -> NONTERM_func_def 
    | 5 -> NONTERM_func_def 
    | 6 -> NONTERM_func_def 
    | 7 -> NONTERM_func_head 
    | 8 -> NONTERM_func_params 
    | 9 -> NONTERM_func_params 
    | 10 -> NONTERM_fpar_list 
    | 11 -> NONTERM_fpar_list 
    | 12 -> NONTERM_fpar_def 
    | 13 -> NONTERM_fpar_def 
    | 14 -> NONTERM_fpar_def 
    | 15 -> NONTERM_data_type 
    | 16 -> NONTERM_data_type 
    | 17 -> NONTERM_type 
    | 18 -> NONTERM_type 
    | 19 -> NONTERM_r_type 
    | 20 -> NONTERM_r_type 
    | 21 -> NONTERM_local_def 
    | 22 -> NONTERM_local_def 
    | 23 -> NONTERM_local_def_list 
    | 24 -> NONTERM_local_def_list 
    | 25 -> NONTERM_var_def 
    | 26 -> NONTERM_var_def 
    | 27 -> NONTERM_var_def 
    | 28 -> NONTERM_var_def 
    | 29 -> NONTERM_stmt 
    | 30 -> NONTERM_stmt 
    | 31 -> NONTERM_stmt 
    | 32 -> NONTERM_stmt 
    | 33 -> NONTERM_stmt 
    | 34 -> NONTERM_stmt 
    | 35 -> NONTERM_stmt 
    | 36 -> NONTERM_stmt 
    | 37 -> NONTERM_stmt 
    | 38 -> NONTERM_stmt 
    | 39 -> NONTERM_stmt 
    | 40 -> NONTERM_stmt 
    | 41 -> NONTERM_stmt 
    | 42 -> NONTERM_stmt 
    | 43 -> NONTERM_stmt 
    | 44 -> NONTERM_stmt 
    | 45 -> NONTERM_stmt 
    | 46 -> NONTERM_stmt_list 
    | 47 -> NONTERM_stmt_list 
    | 48 -> NONTERM_compound_stmt 
    | 49 -> NONTERM_compound_stmt 
    | 50 -> NONTERM_compound_stmt 
    | 51 -> NONTERM_func_call 
    | 52 -> NONTERM_func_call 
    | 53 -> NONTERM_expr_list 
    | 54 -> NONTERM_expr_list 
    | 55 -> NONTERM_expr_list 
    | 56 -> NONTERM_expr_list 
    | 57 -> NONTERM_expr 
    | 58 -> NONTERM_expr 
    | 59 -> NONTERM_expr 
    | 60 -> NONTERM_expr 
    | 61 -> NONTERM_expr 
    | 62 -> NONTERM_expr 
    | 63 -> NONTERM_expr 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_expr 
    | 66 -> NONTERM_expr 
    | 67 -> NONTERM_expr 
    | 68 -> NONTERM_expr 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr 
    | 73 -> NONTERM_expr 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_expr 
    | 79 -> NONTERM_ref_value 
    | 80 -> NONTERM_ref_value 
    | 81 -> NONTERM_ref_value 
    | 82 -> NONTERM_l_value 
    | 83 -> NONTERM_l_value 
    | 84 -> NONTERM_cond 
    | 85 -> NONTERM_cond 
    | 86 -> NONTERM_cond 
    | 87 -> NONTERM_cond 
    | 88 -> NONTERM_cond 
    | 89 -> NONTERM_cond 
    | 90 -> NONTERM_cond 
    | 91 -> NONTERM_cond 
    | 92 -> NONTERM_cond 
    | 93 -> NONTERM_compop 
    | 94 -> NONTERM_compop 
    | 95 -> NONTERM_compop 
    | 96 -> NONTERM_compop 
    | 97 -> NONTERM_compop 
    | 98 -> NONTERM_compop 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | ASTER  -> "ASTER" 
  | SLASH  -> "SLASH" 
  | MOD  -> "MOD" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LSBR  -> "LSBR" 
  | RSBR  -> "RSBR" 
  | LCBR  -> "LCBR" 
  | RCBR  -> "RCBR" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | ASSIGN  -> "ASSIGN" 
  | T_BYTE  -> "T_BYTE" 
  | T_ELSE  -> "T_ELSE" 
  | T_FALSE  -> "T_FALSE" 
  | T_IF  -> "T_IF" 
  | T_INT  -> "T_INT" 
  | T_PROC  -> "T_PROC" 
  | T_REF  -> "T_REF" 
  | T_RETURN  -> "T_RETURN" 
  | T_WHILE  -> "T_WHILE" 
  | T_TRUE  -> "T_TRUE" 
  | T_EOF  -> "T_EOF" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | BYTE _ -> "BYTE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | ASTER  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LSBR  -> (null : System.Object) 
  | RSBR  -> (null : System.Object) 
  | LCBR  -> (null : System.Object) 
  | RCBR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | T_BYTE  -> (null : System.Object) 
  | T_ELSE  -> (null : System.Object) 
  | T_FALSE  -> (null : System.Object) 
  | T_IF  -> (null : System.Object) 
  | T_INT  -> (null : System.Object) 
  | T_PROC  -> (null : System.Object) 
  | T_REF  -> (null : System.Object) 
  | T_RETURN  -> (null : System.Object) 
  | T_WHILE  -> (null : System.Object) 
  | T_TRUE  -> (null : System.Object) 
  | T_EOF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BYTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 11us; 65535us; 0us; 2us; 6us; 40us; 8us; 40us; 67us; 40us; 69us; 40us; 74us; 40us; 84us; 40us; 86us; 40us; 88us; 40us; 96us; 40us; 98us; 40us; 11us; 65535us; 0us; 5us; 6us; 5us; 8us; 5us; 67us; 5us; 69us; 5us; 74us; 5us; 84us; 5us; 86us; 5us; 88us; 5us; 96us; 5us; 98us; 5us; 1us; 65535us; 5us; 6us; 1us; 65535us; 15us; 19us; 2us; 65535us; 15us; 23us; 24us; 25us; 5us; 65535us; 17us; 38us; 21us; 38us; 27us; 28us; 29us; 35us; 44us; 45us; 1us; 65535us; 29us; 30us; 2us; 65535us; 17us; 18us; 21us; 22us; 10us; 65535us; 6us; 42us; 8us; 43us; 67us; 56us; 69us; 56us; 74us; 56us; 84us; 56us; 86us; 56us; 88us; 56us; 96us; 56us; 98us; 56us; 1us; 65535us; 6us; 8us; 10us; 65535us; 6us; 41us; 8us; 41us; 67us; 41us; 69us; 41us; 74us; 41us; 84us; 41us; 86us; 41us; 88us; 41us; 96us; 41us; 98us; 41us; 8us; 65535us; 67us; 68us; 69us; 70us; 74us; 75us; 84us; 85us; 86us; 87us; 88us; 89us; 96us; 97us; 98us; 95us; 1us; 65535us; 98us; 96us; 10us; 65535us; 6us; 7us; 8us; 9us; 67us; 61us; 69us; 61us; 74us; 61us; 84us; 61us; 86us; 61us; 88us; 61us; 96us; 61us; 98us; 61us; 35us; 65535us; 58us; 121us; 65us; 121us; 67us; 62us; 69us; 62us; 72us; 121us; 74us; 62us; 76us; 121us; 84us; 62us; 86us; 62us; 88us; 62us; 96us; 62us; 98us; 62us; 104us; 121us; 110us; 121us; 116us; 121us; 117us; 121us; 122us; 121us; 124us; 121us; 141us; 121us; 142us; 121us; 143us; 121us; 144us; 121us; 145us; 121us; 154us; 121us; 155us; 121us; 156us; 121us; 157us; 121us; 158us; 121us; 160us; 121us; 162us; 121us; 168us; 121us; 170us; 121us; 173us; 121us; 174us; 121us; 175us; 121us; 1us; 65535us; 104us; 106us; 27us; 65535us; 58us; 59us; 65us; 138us; 72us; 138us; 76us; 78us; 104us; 108us; 110us; 111us; 116us; 118us; 117us; 119us; 122us; 123us; 124us; 125us; 141us; 126us; 142us; 127us; 143us; 128us; 144us; 129us; 145us; 130us; 154us; 131us; 155us; 132us; 156us; 133us; 157us; 134us; 158us; 135us; 160us; 136us; 162us; 137us; 168us; 138us; 170us; 139us; 173us; 138us; 174us; 138us; 175us; 140us; 2us; 65535us; 104us; 109us; 110us; 112us; 35us; 65535us; 58us; 115us; 65us; 115us; 67us; 57us; 69us; 57us; 72us; 115us; 74us; 57us; 76us; 115us; 84us; 57us; 86us; 57us; 88us; 57us; 96us; 57us; 98us; 57us; 104us; 115us; 110us; 115us; 116us; 115us; 117us; 115us; 122us; 115us; 124us; 115us; 141us; 115us; 142us; 115us; 143us; 115us; 144us; 115us; 145us; 115us; 154us; 115us; 155us; 115us; 156us; 115us; 157us; 115us; 158us; 115us; 160us; 115us; 162us; 115us; 168us; 115us; 170us; 115us; 173us; 115us; 174us; 115us; 175us; 115us; 6us; 65535us; 65us; 66us; 72us; 73us; 117us; 166us; 168us; 169us; 173us; 171us; 174us; 172us; 3us; 65535us; 119us; 170us; 138us; 170us; 153us; 175us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 15us; 27us; 29us; 31us; 34us; 40us; 42us; 45us; 56us; 58us; 69us; 78us; 80us; 91us; 127us; 129us; 157us; 160us; 196us; 203us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 4us; 3us; 4us; 5us; 6us; 4us; 3us; 4us; 5us; 6us; 1us; 3us; 3us; 4us; 6us; 24us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 5us; 7us; 25us; 26us; 27us; 28us; 9us; 7us; 25us; 26us; 27us; 28us; 51us; 52us; 82us; 83us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 9us; 11us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 3us; 12us; 13us; 14us; 3us; 12us; 13us; 14us; 2us; 12us; 14us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 16us; 2us; 17us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 4us; 25us; 26us; 27us; 28us; 3us; 25us; 26us; 27us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 30us; 3us; 31us; 39us; 40us; 2us; 31us; 39us; 11us; 31us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 33us; 4us; 34us; 35us; 41us; 42us; 2us; 34us; 35us; 4us; 34us; 35us; 89us; 90us; 2us; 34us; 35us; 2us; 34us; 35us; 1us; 35us; 1us; 35us; 2us; 36us; 43us; 1us; 36us; 3us; 36us; 89us; 90us; 1us; 36us; 1us; 36us; 3us; 37us; 38us; 44us; 1us; 37us; 11us; 38us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 1us; 38us; 6us; 39us; 69us; 70us; 71us; 72us; 73us; 1us; 39us; 1us; 40us; 1us; 40us; 2us; 41us; 42us; 2us; 41us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 6us; 44us; 69us; 70us; 71us; 72us; 73us; 1us; 44us; 1us; 45us; 2us; 45us; 50us; 1us; 45us; 1us; 46us; 2us; 47us; 49us; 1us; 47us; 3us; 48us; 49us; 50us; 1us; 48us; 1us; 49us; 1us; 50us; 6us; 51us; 52us; 80us; 81us; 82us; 83us; 4us; 51us; 52us; 82us; 83us; 2us; 51us; 52us; 1us; 51us; 3us; 52us; 55us; 56us; 1us; 52us; 11us; 53us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 1us; 54us; 2us; 55us; 56us; 11us; 55us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 2us; 60us; 86us; 11us; 60us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 13us; 60us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 88us; 91us; 1us; 60us; 1us; 61us; 1us; 62us; 11us; 62us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 1us; 63us; 11us; 63us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 68us; 68us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 68us; 69us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 68us; 70us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 68us; 71us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 68us; 72us; 74us; 75us; 76us; 77us; 78us; 11us; 64us; 65us; 66us; 67us; 68us; 73us; 74us; 75us; 76us; 77us; 78us; 12us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 81us; 83us; 11us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 83us; 12us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 88us; 91us; 11us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 88us; 11us; 64us; 65us; 66us; 67us; 68us; 74us; 75us; 76us; 77us; 78us; 92us; 2us; 64us; 74us; 2us; 65us; 75us; 2us; 66us; 76us; 2us; 67us; 77us; 2us; 68us; 78us; 5us; 69us; 70us; 71us; 72us; 73us; 6us; 69us; 70us; 71us; 72us; 73us; 74us; 6us; 69us; 70us; 71us; 72us; 73us; 75us; 6us; 69us; 70us; 71us; 72us; 73us; 76us; 6us; 69us; 70us; 71us; 72us; 73us; 77us; 6us; 69us; 70us; 71us; 72us; 73us; 78us; 6us; 69us; 70us; 71us; 72us; 73us; 91us; 6us; 69us; 70us; 71us; 72us; 73us; 92us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 79us; 2us; 81us; 83us; 2us; 81us; 83us; 1us; 83us; 1us; 83us; 1us; 84us; 1us; 85us; 3us; 86us; 89us; 90us; 1us; 86us; 1us; 87us; 3us; 87us; 89us; 90us; 2us; 88us; 91us; 3us; 89us; 89us; 90us; 3us; 89us; 90us; 90us; 1us; 89us; 1us; 90us; 1us; 92us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 96us; 1us; 97us; 1us; 98us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 15us; 20us; 22us; 26us; 28us; 30us; 32us; 34us; 40us; 50us; 53us; 55us; 57us; 59us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 78us; 82us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 121us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 151us; 154us; 166us; 168us; 170us; 172us; 174us; 179us; 182us; 187us; 190us; 193us; 195us; 197us; 200us; 202us; 206us; 208us; 210us; 214us; 216us; 228us; 230us; 237us; 239us; 241us; 243us; 246us; 249us; 251us; 253us; 255us; 257us; 264us; 266us; 268us; 271us; 273us; 275us; 278us; 280us; 284us; 286us; 288us; 290us; 297us; 302us; 305us; 307us; 311us; 313us; 325us; 327us; 330us; 342us; 344us; 346us; 348us; 350us; 352us; 355us; 367us; 381us; 383us; 385us; 387us; 399us; 401us; 413us; 425us; 437us; 449us; 461us; 473us; 485us; 497us; 509us; 521us; 533us; 546us; 558us; 571us; 583us; 595us; 598us; 601us; 604us; 607us; 610us; 616us; 623us; 630us; 637us; 644us; 651us; 658us; 665us; 667us; 669us; 671us; 673us; 675us; 677us; 680us; 683us; 685us; 687us; 689us; 691us; 695us; 697us; 699us; 703us; 706us; 710us; 714us; 716us; 718us; 720us; 722us; 724us; 726us; 728us; 730us; |]
let _fsyacc_action_rows = 182
let _fsyacc_actionTableElements = [|2us; 32768us; 35us; 12us; 39us; 3us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 34us; 4us; 0us; 16386us; 1us; 32768us; 14us; 15us; 3us; 32768us; 18us; 98us; 35us; 13us; 39us; 10us; 0us; 16387us; 3us; 32768us; 18us; 98us; 35us; 13us; 39us; 11us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 1us; 16391us; 21us; 44us; 5us; 16391us; 14us; 104us; 16us; 162us; 21us; 44us; 23us; 16466us; 39us; 16466us; 2us; 32768us; 15us; 16us; 35us; 26us; 1us; 32768us; 21us; 17us; 3us; 32768us; 24us; 34us; 28us; 33us; 29us; 39us; 0us; 16392us; 2us; 32768us; 15us; 20us; 20us; 24us; 1us; 32768us; 21us; 21us; 3us; 32768us; 24us; 34us; 28us; 33us; 29us; 39us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 35us; 26us; 0us; 16395us; 1us; 32768us; 21us; 27us; 3us; 32768us; 24us; 34us; 28us; 33us; 30us; 29us; 1us; 16396us; 16us; 31us; 2us; 32768us; 24us; 34us; 28us; 33us; 0us; 16397us; 1us; 32768us; 17us; 32us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 1us; 16401us; 16us; 36us; 1us; 32768us; 17us; 37us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 3us; 32768us; 24us; 34us; 28us; 33us; 39us; 53us; 3us; 32768us; 16us; 47us; 22us; 46us; 39us; 51us; 0us; 16409us; 1us; 32768us; 37us; 48us; 1us; 32768us; 17us; 49us; 1us; 32768us; 22us; 50us; 0us; 16410us; 1us; 32768us; 22us; 52us; 0us; 16411us; 1us; 32768us; 22us; 54us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 2us; 32768us; 23us; 58us; 39us; 82us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 80us; 6us; 32768us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 22us; 60us; 0us; 16415us; 0us; 16416us; 1us; 32768us; 22us; 63us; 0us; 16417us; 2us; 32768us; 14us; 65us; 39us; 84us; 10us; 32768us; 6us; 122us; 7us; 124us; 11us; 168us; 14us; 117us; 26us; 165us; 33us; 164us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 153us; 3us; 32768us; 12us; 173us; 13us; 174us; 15us; 67us; 7us; 32768us; 18us; 98us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 1us; 16418us; 25us; 69us; 7us; 32768us; 18us; 98us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 0us; 16419us; 2us; 32768us; 14us; 72us; 39us; 88us; 10us; 32768us; 6us; 122us; 7us; 124us; 11us; 168us; 14us; 117us; 26us; 165us; 33us; 164us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 153us; 3us; 32768us; 12us; 173us; 13us; 174us; 15us; 74us; 7us; 32768us; 18us; 98us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 0us; 16420us; 8us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 22us; 77us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 90us; 0us; 16421us; 6us; 32768us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 22us; 79us; 0us; 16422us; 6us; 32768us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 22us; 81us; 0us; 16423us; 1us; 32768us; 22us; 83us; 0us; 16424us; 7us; 32768us; 18us; 98us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 1us; 16425us; 25us; 86us; 7us; 32768us; 18us; 98us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 0us; 16426us; 7us; 32768us; 18us; 98us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 0us; 16427us; 6us; 32768us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 22us; 91us; 0us; 16428us; 1us; 32768us; 22us; 94us; 2us; 32768us; 19us; 101us; 22us; 94us; 0us; 16429us; 0us; 16430us; 8us; 32768us; 18us; 98us; 19us; 100us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 92us; 0us; 16431us; 8us; 32768us; 18us; 98us; 19us; 99us; 22us; 55us; 27us; 64us; 31us; 76us; 32us; 71us; 35us; 14us; 39us; 93us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 7us; 16464us; 6us; 16466us; 7us; 16466us; 8us; 16466us; 9us; 16466us; 10us; 16466us; 14us; 104us; 16us; 160us; 2us; 16466us; 14us; 104us; 16us; 162us; 9us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 15us; 105us; 35us; 102us; 36us; 159us; 37us; 113us; 38us; 114us; 39us; 146us; 0us; 16435us; 2us; 32768us; 15us; 107us; 20us; 110us; 0us; 16436us; 5us; 16437us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 0us; 16438us; 8us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 102us; 36us; 159us; 37us; 113us; 38us; 114us; 39us; 146us; 5us; 16439us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 10us; 32768us; 6us; 122us; 7us; 124us; 11us; 168us; 14us; 117us; 26us; 165us; 33us; 164us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 153us; 6us; 32768us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 15us; 120us; 12us; 32768us; 0us; 176us; 1us; 177us; 2us; 178us; 3us; 180us; 4us; 179us; 5us; 181us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 15us; 120us; 0us; 16444us; 0us; 16445us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 0us; 16446us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 0us; 16447us; 3us; 16448us; 8us; 143us; 9us; 144us; 10us; 145us; 3us; 16449us; 8us; 143us; 9us; 144us; 10us; 145us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 3us; 16453us; 8us; 143us; 9us; 144us; 10us; 145us; 3us; 16454us; 8us; 143us; 9us; 144us; 10us; 145us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 6us; 32768us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 17us; 161us; 6us; 32768us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 17us; 163us; 11us; 32768us; 0us; 176us; 1us; 177us; 2us; 178us; 3us; 180us; 4us; 179us; 5us; 181us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 5us; 16472us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 5us; 16476us; 6us; 142us; 7us; 141us; 8us; 143us; 9us; 144us; 10us; 145us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 147us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 148us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 149us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 150us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 151us; 5us; 32768us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 5us; 16458us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 5us; 16459us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 5us; 16460us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 5us; 16461us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 5us; 16462us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 5us; 16475us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 11us; 32768us; 0us; 176us; 1us; 177us; 2us; 178us; 3us; 180us; 4us; 179us; 5us; 181us; 6us; 155us; 7us; 154us; 8us; 156us; 9us; 157us; 10us; 158us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 0us; 16463us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 5us; 16465us; 6us; 16467us; 7us; 16467us; 8us; 16467us; 9us; 16467us; 10us; 16467us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 0us; 16467us; 0us; 16468us; 0us; 16469us; 3us; 32768us; 12us; 173us; 13us; 174us; 15us; 167us; 0us; 16470us; 10us; 32768us; 6us; 122us; 7us; 124us; 11us; 168us; 14us; 117us; 26us; 165us; 33us; 164us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 153us; 0us; 16471us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 152us; 0us; 16473us; 1us; 16474us; 12us; 173us; 10us; 32768us; 6us; 122us; 7us; 124us; 11us; 168us; 14us; 117us; 26us; 165us; 33us; 164us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 153us; 10us; 32768us; 6us; 122us; 7us; 124us; 11us; 168us; 14us; 117us; 26us; 165us; 33us; 164us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 153us; 7us; 32768us; 6us; 122us; 7us; 124us; 14us; 116us; 35us; 103us; 37us; 113us; 38us; 114us; 39us; 146us; 0us; 16477us; 0us; 16478us; 0us; 16479us; 0us; 16480us; 0us; 16481us; 0us; 16482us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 7us; 8us; 10us; 14us; 15us; 19us; 20us; 21us; 22us; 23us; 25us; 31us; 34us; 36us; 40us; 41us; 44us; 46us; 50us; 51us; 52us; 54us; 55us; 57us; 61us; 63us; 66us; 67us; 69us; 70us; 71us; 72us; 74us; 76us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 87us; 91us; 92us; 94us; 96us; 98us; 99us; 101us; 102us; 104us; 105us; 106us; 107us; 110us; 118us; 125us; 126us; 127us; 129us; 130us; 133us; 144us; 148us; 156us; 158us; 166us; 167us; 170us; 181us; 185us; 193us; 194us; 203us; 204us; 211us; 212us; 219us; 220us; 222us; 223us; 231us; 233us; 241us; 242us; 250us; 251us; 258us; 259us; 261us; 264us; 265us; 266us; 275us; 276us; 285us; 286us; 287us; 288us; 296us; 299us; 309us; 310us; 313us; 314us; 320us; 321us; 330us; 336us; 337us; 338us; 339us; 340us; 348us; 359us; 366us; 379us; 380us; 381us; 389us; 390us; 398us; 399us; 403us; 407us; 408us; 409us; 410us; 414us; 418us; 419us; 420us; 421us; 428us; 435us; 447us; 453us; 459us; 467us; 475us; 483us; 491us; 499us; 505us; 511us; 517us; 523us; 529us; 535us; 541us; 553us; 561us; 569us; 577us; 585us; 593us; 594us; 602us; 608us; 616us; 617us; 618us; 619us; 623us; 624us; 635us; 636us; 644us; 645us; 647us; 658us; 669us; 677us; 678us; 679us; 680us; 681us; 682us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 3us; 4us; 3us; 4us; 1us; 4us; 5us; 1us; 3us; 3us; 4us; 5us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 4us; 7us; 5us; 4us; 1us; 1us; 4us; 1us; 2us; 5us; 7us; 5us; 2us; 3us; 4us; 3us; 3us; 5us; 3us; 3us; 2us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 3us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 4us; 1us; 4us; 1us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 16398us; 16399us; 16400us; 65535us; 65535us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 16410us; 65535us; 16411us; 65535us; 16412us; 16413us; 16414us; 65535us; 65535us; 65535us; 16415us; 16416us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 16422us; 65535us; 16423us; 65535us; 16424us; 65535us; 65535us; 65535us; 16426us; 65535us; 16427us; 65535us; 16428us; 65535us; 65535us; 16429us; 16430us; 65535us; 16431us; 65535us; 16432us; 16433us; 16434us; 65535us; 65535us; 65535us; 16435us; 65535us; 16436us; 65535us; 16438us; 65535us; 65535us; 16440us; 16441us; 16442us; 16443us; 65535us; 65535us; 65535us; 65535us; 16444us; 16445us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16463us; 65535us; 65535us; 65535us; 16467us; 16468us; 16469us; 65535us; 16470us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16477us; 16478us; 16479us; 16480us; 16481us; 16482us; |]
let _fsyacc_reductions ()  =    [| 
# 428 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 437 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                        _1 
                   )
# 67 "Parser.fsy"
                 :  quadType list list ));
# 448 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                       let p=FindPosition parseState in fatal "Unrecognized Parse Error at %A\n" p 
                   )
# 69 "Parser.fsy"
                 :  quadType list list ));
# 458 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                         closeScope (); processFunctionDefinition parseState _1 [] _3 
                   )
# 72 "Parser.fsy"
                 :  quadType list list));
# 471 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                                              closeScope (); processFunctionDefinition parseState _1 _3 _4 
                   )
# 73 "Parser.fsy"
                 :  quadType list list));
# 485 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                             
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Statements in Function declaration must be inside curly brackets\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     closeScope ()
                     []
                   )
# 74 "Parser.fsy"
                 :  quadType list list));
# 501 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  entry )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_params)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                     
                     let (ps,pe)=parseState.ResultRange
                     error "Syntax Error at %A - %A: Statements in Function body must be inside curly brackets\n" (ps.Line,ps.Column) (pe.Line,pe.Column)
                     closeScope ()
                     []
                   )
# 81 "Parser.fsy"
                 :  quadType list list));
# 518 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                               
                     let f = newFunction (id_make _1) true true
                     Some (f) |> openScope
                     f
                   )
# 89 "Parser.fsy"
                 :  entry ));
# 532 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                  endFunctionHeader (getScopeFunction()) _4 
                   )
# 96 "Parser.fsy"
                 : 'func_params));
# 543 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                endFunctionHeader (getScopeFunction()) _5 
                   )
# 98 "Parser.fsy"
                 : 'func_params));
# 555 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                               () 
                   )
# 101 "Parser.fsy"
                 :  unit ));
# 566 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  unit )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                     () 
                   )
# 103 "Parser.fsy"
                 :  unit ));
# 578 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                      newParameter (id_make _1) _3 PASS_BY_VALUE (getScopeFunction()) true |>ignore 
                   )
# 106 "Parser.fsy"
                 :  unit ));
# 590 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                 newParameter (id_make _1) _4 PASS_BY_REFERENCE (getScopeFunction()) true |>ignore
                   )
# 108 "Parser.fsy"
                 :  unit ));
# 602 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                        syntaxError parseState "Syntax Error at %A - %A: Cannot pass Array as Parameter by Value\n" ()
                   )
# 110 "Parser.fsy"
                 :  unit ));
# 614 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                        TYPE_int 
                   )
# 113 "Parser.fsy"
                 :  typ ));
# 624 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                   TYPE_byte 
                   )
# 115 "Parser.fsy"
                 :  typ ));
# 634 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                          _1 
                   )
# 118 "Parser.fsy"
                 :  typ ));
# 645 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                              TYPE_array (_1,-1s) 
                   )
# 120 "Parser.fsy"
                 :  typ ));
# 656 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                         _1 
                   )
# 123 "Parser.fsy"
                 :  typ ));
# 667 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                    TYPE_proc 
                   )
# 125 "Parser.fsy"
                 :  typ ));
# 677 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                           _1 
                   )
# 128 "Parser.fsy"
                 :  quadType list list));
# 688 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                    [[]] 
                   )
# 130 "Parser.fsy"
                 :  quadType list list));
# 699 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                     _1 
                   )
# 133 "Parser.fsy"
                 : 'local_def_list));
# 710 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'local_def_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                       _2@_1 
                   )
# 135 "Parser.fsy"
                 : 'local_def_list));
# 722 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                newVariable (id_make _1) _3 false |>ignore; [] 
                   )
# 138 "Parser.fsy"
                 :  quadType list ));
# 734 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int16)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                     newVariable (id_make _1) (TYPE_array (_3,_5)) true |>ignore; [] 
                   )
# 140 "Parser.fsy"
                 :  quadType list ));
# 747 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  typ )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                              
                     let p=FindPosition parseState
                     error "Syntax Error at %A: Invalid Variable Definition %s: ';' or [integer] expected\n" p _1 |>ignore; [] 
                   )
# 142 "Parser.fsy"
                 :  quadType list ));
# 761 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                      
                     let p=FindPosition parseState
                     error "Syntax Error at %A: Invalid Variable Definition %s: Invalid datatype after ':'\n" p _1 |>ignore; [] 
                   )
# 146 "Parser.fsy"
                 :  quadType list ));
# 774 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                               [] 
                   )
# 151 "Parser.fsy"
                 :  quadType list ));
# 784 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Cannot have declarations among statements\n" []
                   )
# 153 "Parser.fsy"
                 :  quadType list ));
# 795 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                           processAssignment parseState _1 _3 
                   )
# 155 "Parser.fsy"
                 :  quadType list ));
# 807 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                               _1 
                   )
# 157 "Parser.fsy"
                 :  quadType list ));
# 818 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                   processFunctionCallStmt parseState _1 
                   )
# 159 "Parser.fsy"
                 :  quadType list ));
# 829 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                          processIfStmt parseState _3 _5 
                   )
# 161 "Parser.fsy"
                 :  quadType list ));
# 841 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                   processIfElseStmt parseState _3 _5 _7 
                   )
# 163 "Parser.fsy"
                 :  quadType list ));
# 854 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                            processWhileStmt parseState _3 _5 
                   )
# 165 "Parser.fsy"
                 :  quadType list ));
# 866 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                  processReturnStmt parseState 
                   )
# 167 "Parser.fsy"
                 :  quadType list ));
# 876 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                      processReturnExpressionStmt parseState _2 
                   )
# 169 "Parser.fsy"
                 :  quadType list ));
# 887 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Assignment - Expression expected\n" []
                   )
# 171 "Parser.fsy"
                 :  quadType list ));
# 898 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                      syntaxError parseState "Syntax Error at %A - %A: Invalid Assignment - '=' expected\n" []
                   )
# 173 "Parser.fsy"
                 :  quadType list ));
# 909 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" []
                   )
# 175 "Parser.fsy"
                 :  quadType list ));
# 920 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                         syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" []
                   )
# 177 "Parser.fsy"
                 :  quadType list ));
# 932 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                  syntaxError parseState "Syntax Error at %A - %A: Condition in parentheses expected\n" []
                   )
# 179 "Parser.fsy"
                 :  quadType list ));
# 943 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                       syntaxError parseState "Syntax Error at %A - %A: Invalid Return Statement\n" []
                   )
# 181 "Parser.fsy"
                 :  quadType list ));
# 953 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                syntaxError parseState "Syntax Error at %A - %A: Invalid Statement\n" []
                   )
# 183 "Parser.fsy"
                 :  quadType list ));
# 963 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                          _1 
                   )
# 186 "Parser.fsy"
                 :  quadType list ));
# 974 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                           _2@_1 
                   )
# 188 "Parser.fsy"
                 :  quadType list ));
# 986 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                   [] 
                   )
# 191 "Parser.fsy"
                 :  quadType list ));
# 996 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  quadType list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                  _2 
                   )
# 193 "Parser.fsy"
                 :  quadType list ));
# 1007 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                               syntaxError parseState "Syntax Error at %A - %A: Invalid Function body\n" []
                   )
# 195 "Parser.fsy"
                 :  quadType list ));
# 1017 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                      processFunctionCall parseState _1 [] 
                   )
# 198 "Parser.fsy"
                 :  expressionType ));
# 1028 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  parameterList )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                       processFunctionCall parseState _1 _3 
                   )
# 200 "Parser.fsy"
                 :  expressionType ));
# 1040 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                             [_1,PASS_BY_VALUE] 
                   )
# 203 "Parser.fsy"
                 :  parameterList ));
# 1051 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                          [_1,PASS_BY_REFERENCE] 
                   )
# 205 "Parser.fsy"
                 :  parameterList ));
# 1062 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  parameterList )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                   (_3,PASS_BY_VALUE)::_1 
                   )
# 207 "Parser.fsy"
                 :  parameterList ));
# 1074 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  parameterList )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                                      (_3,PASS_BY_REFERENCE)::_1 
                   )
# 209 "Parser.fsy"
                 :  parameterList ));
# 1086 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int16)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                     { Code = []; Place = Int(_1) } 
                   )
# 213 "Parser.fsy"
                 :  expressionType ));
# 1097 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                   { Code = []; Place = Byte(_1) } 
                   )
# 215 "Parser.fsy"
                 :  expressionType ));
# 1108 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                     processLValueExpression parseState _1 
                   )
# 217 "Parser.fsy"
                 :  expressionType ));
# 1119 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                             _2 
                   )
# 219 "Parser.fsy"
                 :  expressionType ));
# 1130 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                       processFunctionCallExpression parseState _1 
                   )
# 221 "Parser.fsy"
                 :  expressionType ));
# 1141 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                              processUnExpression parseState (OpPos) _2 
                   )
# 223 "Parser.fsy"
                 :  expressionType ));
# 1152 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                               processUnExpression parseState (OpNeg) _2 
                   )
# 225 "Parser.fsy"
                 :  expressionType ));
# 1163 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                           processBinExpression parseState (OpSub) _1 _3 
                   )
# 227 "Parser.fsy"
                 :  expressionType ));
# 1175 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                          processBinExpression parseState (OpAdd) _1 _3 
                   )
# 229 "Parser.fsy"
                 :  expressionType ));
# 1187 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                           processBinExpression parseState (OpMult) _1 _3 
                   )
# 231 "Parser.fsy"
                 :  expressionType ));
# 1199 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                           processBinExpression parseState (OpDiv) _1 _3 
                   )
# 233 "Parser.fsy"
                 :  expressionType ));
# 1211 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                          processBinExpression parseState (OpMod) _1 _3 
                   )
# 235 "Parser.fsy"
                 :  expressionType ));
# 1223 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 237 "Parser.fsy"
                 :  expressionType ));
# 1234 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 239 "Parser.fsy"
                 :  expressionType ));
# 1245 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 241 "Parser.fsy"
                 :  expressionType ));
# 1256 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 243 "Parser.fsy"
                 :  expressionType ));
# 1267 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                          syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 245 "Parser.fsy"
                 :  expressionType ));
# 1278 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 247 "Parser.fsy"
                 :  expressionType ));
# 1289 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                           syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 249 "Parser.fsy"
                 :  expressionType ));
# 1300 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 251 "Parser.fsy"
                 :  expressionType ));
# 1311 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                            syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 253 "Parser.fsy"
                 :  expressionType ));
# 1322 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                          syntaxError parseState "Syntax Error at %A - %A: Invalid Expression\n" voidExpression 
                   )
# 255 "Parser.fsy"
                 :  expressionType ));
# 1333 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string list*string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                             { Code = []; Place = String(_1) } 
                   )
# 259 "Parser.fsy"
                 :  expressionType ));
# 1344 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                    processLValue1 parseState _1 
                   )
# 261 "Parser.fsy"
                 :  expressionType ));
# 1355 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                               processLValue3 parseState _1 _3 
                   )
# 263 "Parser.fsy"
                 :  expressionType ));
# 1367 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "Parser.fsy"
                                       processLValue2 parseState _1 
                   )
# 266 "Parser.fsy"
                 :  expressionType ));
# 1378 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                            processLValue3 parseState _1 _3 
                   )
# 268 "Parser.fsy"
                 :  expressionType ));
# 1390 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                       processTrue () 
                   )
# 271 "Parser.fsy"
                 :  conditionType ));
# 1400 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                     processFalse () 
                   )
# 273 "Parser.fsy"
                 :  conditionType ));
# 1410 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "Parser.fsy"
                                             _2 
                   )
# 275 "Parser.fsy"
                 :  conditionType ));
# 1421 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                                      { Code=_2.Code ; True=_2.False ; False=_2.True } 
                   )
# 277 "Parser.fsy"
                 :  conditionType ));
# 1432 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  compType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "Parser.fsy"
                                            processComparison parseState _2 _1 _3 
                   )
# 279 "Parser.fsy"
                 :  conditionType ));
# 1445 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "Parser.fsy"
                                          processAndCondition parseState _1 _3 
                   )
# 281 "Parser.fsy"
                 :  conditionType ));
# 1457 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  conditionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "Parser.fsy"
                                         processOrCondition parseState _1 _3 
                   )
# 283 "Parser.fsy"
                 :  conditionType ));
# 1469 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  compType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A: Invalid Condition\n" voidCondition
                   )
# 285 "Parser.fsy"
                 :  conditionType ));
# 1481 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  compType )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  expressionType )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "Parser.fsy"
                                             syntaxError parseState "Syntax Error at %A: Invalid Condition\n" voidCondition
                   )
# 287 "Parser.fsy"
                 :  conditionType ));
# 1493 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                  CompEQ 
                   )
# 290 "Parser.fsy"
                 :  compType ));
# 1503 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                               CompNE 
                   )
# 292 "Parser.fsy"
                 :  compType ));
# 1513 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "Parser.fsy"
                               CompLT 
                   )
# 294 "Parser.fsy"
                 :  compType ));
# 1523 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                               CompGT 
                   )
# 296 "Parser.fsy"
                 :  compType ));
# 1533 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                               CompLE 
                   )
# 298 "Parser.fsy"
                 :  compType ));
# 1543 "obj\x86\Release\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                               CompGE 
                   )
# 300 "Parser.fsy"
                 :  compType ));
|]
# 1554 "obj\x86\Release\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  quadType list list  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
