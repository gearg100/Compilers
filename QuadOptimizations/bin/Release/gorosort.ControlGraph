GraphNodeId 0
Predecessors = []
Successors = [1]
Code :
1:	unit , gorosort, - , -

GraphNodeId 1
Predecessors = [0]
Successors = [2]
Code :
2:	par  , $1 , RET , -
3:	call , - , - , readInteger

GraphNodeId 2
Predecessors = [1]
Successors = [3]
Code :
4:	:=   , $1, - , t
5:	:=   , 1, - , case

GraphNodeId 3
Predecessors = [2]
Successors = [4; 17]
Code :
6:	<=   , case, t, (7, 35)

GraphNodeId 4
Predecessors = [3]
Successors = [5]
Code :
7:	par  , $2 , RET , -
8:	call , - , - , readInteger

GraphNodeId 5
Predecessors = [4]
Successors = [6]
Code :
9:	:=   , $2, - , n
10:	:=   , 0, - , inPlace
11:	:=   , 1, - , i

GraphNodeId 6
Predecessors = [5]
Successors = [7; 11]
Code :
12:	<=   , i, n, (13, 21)

GraphNodeId 7
Predecessors = [6]
Successors = [8]
Code :
13:	par  , $3 , RET , -
14:	call , - , - , readInteger

GraphNodeId 8
Predecessors = [7]
Successors = [9; 10]
Code :
15:	==   , i, $3, (16, 18)

GraphNodeId 9
Predecessors = [8]
Successors = [10]
Code :
16:	+    , inPlace, 1, $4
17:	:=   , $4, - , inPlace

GraphNodeId 10
Predecessors = [9; 8]
Successors = [11]
Code :
18:	+    , i, 1, $5
19:	:=   , $5, - , i
20:	jump , - , - , 12

GraphNodeId 11
Predecessors = [10; 6]
Successors = [12]
Code :
21:	par  , "Case #" , R , -
22:	call , - , - , writeString

GraphNodeId 12
Predecessors = [11]
Successors = [13]
Code :
23:	par  , case , V , -
24:	call , - , - , writeInteger

GraphNodeId 13
Predecessors = [12]
Successors = [14]
Code :
25:	par  , ": " , R , -
26:	call , - , - , writeString

GraphNodeId 14
Predecessors = [13]
Successors = [15]
Code :
27:	-    , n, inPlace, $6
28:	par  , $6 , V , -
29:	call , - , - , writeInteger

GraphNodeId 15
Predecessors = [14]
Successors = [16]
Code :
30:	par  , ".000000\n" , R , -
31:	call , - , - , writeString

GraphNodeId 16
Predecessors = [15]
Successors = [17]
Code :
32:	+    , case, 1, $7
33:	:=   , $7, - , case
34:	jump , - , - , 6

GraphNodeId 17
Predecessors = [16; 3]
Successors = []
Code :
35:	endu , gorosort, - , -

