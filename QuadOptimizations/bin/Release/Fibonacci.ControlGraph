GraphNodeId 0
Predecessors = []
Successors = [1]
Quads :
1:	unit , tailRecursive, - , -

GraphNodeId 1
Predecessors = [0]
Successors = [3; 2]
Quads :
2:	>    , index, limit, 4
3:	jump , - , - , 5

GraphNodeId 2
Predecessors = [1]
Successors = [9]
Quads :
4:	ret  , -, -, -

GraphNodeId 3
Predecessors = [1]
Successors = [4]
Quads :
5:	par  , "Fibonacci number " , R , -
6:	call , - , - , writeString

GraphNodeId 4
Predecessors = [3]
Successors = [5]
Quads :
7:	par  , index , V , -
8:	call , - , - , writeInteger

GraphNodeId 5
Predecessors = [4]
Successors = [6]
Quads :
9:	par  , " is " , R , -
10:	call , - , - , writeString

GraphNodeId 6
Predecessors = [5]
Successors = [7]
Quads :
11:	par  , cur , V , -
12:	call , - , - , writeInteger

GraphNodeId 7
Predecessors = [6]
Successors = [8]
Quads :
13:	par  , ".\n" , R , -
14:	call , - , - , writeString

GraphNodeId 8
Predecessors = [7]
Successors = [9]
Quads :
15:	par  , cur , V , -
16:	+    , prev, cur, $1
17:	par  , $1 , V , -
18:	+    , index, 1, $2
19:	par  , $2 , V , -
20:	call , - , - , tailRecursive

GraphNodeId 9
Predecessors = [8; 2]
Successors = []
Quads :
21:	endu , tailRecursive, - , -

GraphNodeId 0
Predecessors = []
Successors = [1]
Quads :
22:	unit , fibonacci, - , -

GraphNodeId 1
Predecessors = [0]
Successors = [2]
Quads :
23:	par  , "Limit: " , R , -
24:	call , - , - , writeString

GraphNodeId 2
Predecessors = [1]
Successors = [3]
Quads :
25:	par  , $3 , RET , -
26:	call , - , - , readInteger

GraphNodeId 3
Predecessors = [2]
Successors = [4]
Quads :
27:	:=   , $3, - , limit
28:	par  , 0 , V , -
29:	par  , 1 , V , -
30:	par  , 1 , V , -
31:	call , - , - , tailRecursive

GraphNodeId 4
Predecessors = [3]
Successors = []
Quads :
32:	endu , fibonacci, - , -

