1:	unit , swap, - , -
2:	:=   , x, - , t
3:	:=   , y, - , x
4:	:=   , t, - , y
5:	endu , swap, - , -
6:	unit , bsort, - , -
7:	:=   , 121, - , changed
8:	==   , changed, 121, (9, 41)
9:	:=   , 110, - , changed
10:	:=   , 0, - , i
11:	-    , n, 1, $1
12:	<    , i, $1, (13, 40)
13:	==   , choice, 1, (14, 26)
14:	array, x, i, $2
15:	+    , i, 1, $3
16:	array, x, $3, $4
17:	>    , [$2], [$4], (18, 25)
18:	+    , i, 1, $6
19:	array, x, $6, $7
20:	par  , [$7] , R , -
21:	array, x, i, $5
22:	par  , [$5] , R , -
23:	call , - , - , swap
24:	:=   , 121, - , changed
25:	jump , - , - , 37
26:	array, x, i, $8
27:	+    , i, 1, $9
28:	array, x, $9, $10
29:	<    , [$8], [$10], (30, 37)
30:	+    , i, 1, $12
31:	array, x, $12, $13
32:	par  , [$13] , R , -
33:	array, x, i, $11
34:	par  , [$11] , R , -
35:	call , - , - , swap
36:	:=   , 121, - , changed
37:	+    , i, 1, $14
38:	:=   , $14, - , i
39:	jump , - , - , 11
40:	jump , - , - , 8
41:	endu , bsort, - , -
42:	unit , writeArray, - , -
43:	par  , msg , R , -
44:	call , - , - , writeString
45:	:=   , 0, - , i
46:	<    , i, n, (47, 56)
47:	>    , i, 0, (48, 50)
48:	par  , ", " , R , -
49:	call , - , - , writeString
50:	array, x, i, $15
51:	par  , [$15] , V , -
52:	call , - , - , writeInteger
53:	+    , i, 1, $16
54:	:=   , $16, - , i
55:	jump , - , - , 46
56:	par  , "\n" , R , -
57:	call , - , - , writeString
58:	endu , writeArray, - , -
59:	unit , main, - , -
60:	par  , "Seed :\t" , R , -
61:	call , - , - , writeString
62:	par  , $17 , RET , -
63:	call , - , - , readInteger
64:	:=   , $17, - , seed
65:	par  , "How do you want to sort?\n" , R , -
66:	call , - , - , writeString
67:	par  , "How do you want to sort?\x0a" , R , -
68:	call , - , - , writeString
69:	par  , "  1. Min to Max\n" , R , -
70:	call , - , - , writeString
71:	par  , "  2. Max to Min\n" , R , -
72:	call , - , - , writeString
73:	par  , "Choice : " , R , -
74:	call , - , - , writeString
75:	par  , $18 , RET , -
76:	call , - , - , readInteger
77:	:=   , $18, - , choice
78:	<    , choice, 1, (80, 79)
79:	>    , choice, 2, (80, 92)
80:	par  , "How do you want to sort?\x0a" , R , -
81:	call , - , - , writeString
82:	par  , "  1. Min to Max\n" , R , -
83:	call , - , - , writeString
84:	par  , "  2. Max to Min\n" , R , -
85:	call , - , - , writeString
86:	par  , "Choice : " , R , -
87:	call , - , - , writeString
88:	par  , $19 , RET , -
89:	call , - , - , readInteger
90:	:=   , $19, - , choice
91:	jump , - , - , 78
92:	:=   , 0, - , i
93:	<    , i, 16, (94, 104)
94:	*    , seed, 137, $20
95:	+    , $20, 220, $21
96:	+    , $21, i, $22
97:	%    , $22, 101, $23
98:	:=   , $23, - , seed
99:	array, x, i, $24
100:	:=   , seed, - , [$24]
101:	+    , i, 1, $25
102:	:=   , $25, - , i
103:	jump , - , - , 93
104:	par  , x , R , -
105:	par  , 16 , V , -
106:	par  , "Initial array: " , R , -
107:	call , - , - , writeArray
108:	par  , x , R , -
109:	par  , choice , V , -
110:	par  , 16 , V , -
111:	call , - , - , bsort
112:	par  , x , R , -
113:	par  , 16 , V , -
114:	par  , "Sorted array: " , R , -
115:	call , - , - , writeArray
116:	endu , main, - , -
